
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20220210

module MenhirBasics = struct
  
  exception Error
  
  let _eRR =
    fun _s ->
      raise Error
  
  type token = 
    | XOR_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 20 "cparser/pre_parser.ml"
  )
    | WHILE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 25 "cparser/pre_parser.ml"
  )
    | VOLATILE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 30 "cparser/pre_parser.ml"
  )
    | VOID of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 35 "cparser/pre_parser.ml"
  )
    | VAR_NAME of (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 40 "cparser/pre_parser.ml"
  )
    | UNSIGNED of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 45 "cparser/pre_parser.ml"
  )
    | UNION of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 50 "cparser/pre_parser.ml"
  )
    | UNDERSCORE_BOOL of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 55 "cparser/pre_parser.ml"
  )
    | TYPEDEF_NAME of (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 60 "cparser/pre_parser.ml"
  )
    | TYPEDEF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 65 "cparser/pre_parser.ml"
  )
    | TILDE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 70 "cparser/pre_parser.ml"
  )
    | SWITCH of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 75 "cparser/pre_parser.ml"
  )
    | SUB_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 80 "cparser/pre_parser.ml"
  )
    | STRUCT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 85 "cparser/pre_parser.ml"
  )
    | STRING_LITERAL of (
# 50 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 90 "cparser/pre_parser.ml"
  )
    | STATIC_ASSERT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 95 "cparser/pre_parser.ml"
  )
    | STATIC of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 100 "cparser/pre_parser.ml"
  )
    | STAR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 105 "cparser/pre_parser.ml"
  )
    | SLASH of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 110 "cparser/pre_parser.ml"
  )
    | SIZEOF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 115 "cparser/pre_parser.ml"
  )
    | SIGNED of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 120 "cparser/pre_parser.ml"
  )
    | SHORT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 125 "cparser/pre_parser.ml"
  )
    | SEMICOLON of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 130 "cparser/pre_parser.ml"
  )
    | RPAREN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 135 "cparser/pre_parser.ml"
  )
    | RIGHT_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 140 "cparser/pre_parser.ml"
  )
    | RIGHT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 145 "cparser/pre_parser.ml"
  )
    | RETURN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 150 "cparser/pre_parser.ml"
  )
    | RESTRICT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 155 "cparser/pre_parser.ml"
  )
    | REGISTER of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 160 "cparser/pre_parser.ml"
  )
    | RBRACK of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 165 "cparser/pre_parser.ml"
  )
    | RBRACE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 170 "cparser/pre_parser.ml"
  )
    | QUESTION of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 175 "cparser/pre_parser.ml"
  )
    | PTR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 180 "cparser/pre_parser.ml"
  )
    | PRE_NAME of (
# 46 "cparser/pre_parser.mly"
      (string)
# 185 "cparser/pre_parser.ml"
  )
    | PRAGMA of (
# 51 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 190 "cparser/pre_parser.ml"
  )
    | PLUS of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 195 "cparser/pre_parser.ml"
  )
    | PERCENT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 200 "cparser/pre_parser.ml"
  )
    | PACKED of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 205 "cparser/pre_parser.ml"
  )
    | OR_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 210 "cparser/pre_parser.ml"
  )
    | NORETURN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 215 "cparser/pre_parser.ml"
  )
    | NEQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 220 "cparser/pre_parser.ml"
  )
    | MUL_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 225 "cparser/pre_parser.ml"
  )
    | MOD_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 230 "cparser/pre_parser.ml"
  )
    | MINUS of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 235 "cparser/pre_parser.ml"
  )
    | LT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 240 "cparser/pre_parser.ml"
  )
    | LPAREN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 245 "cparser/pre_parser.ml"
  )
    | LONG of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 250 "cparser/pre_parser.ml"
  )
    | LEQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 255 "cparser/pre_parser.ml"
  )
    | LEFT_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 260 "cparser/pre_parser.ml"
  )
    | LEFT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 265 "cparser/pre_parser.ml"
  )
    | LBRACK of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 270 "cparser/pre_parser.ml"
  )
    | LBRACE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 275 "cparser/pre_parser.ml"
  )
    | INT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 280 "cparser/pre_parser.ml"
  )
    | INLINE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 285 "cparser/pre_parser.ml"
  )
    | INC of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 290 "cparser/pre_parser.ml"
  )
    | IF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 295 "cparser/pre_parser.ml"
  )
    | HAT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 300 "cparser/pre_parser.ml"
  )
    | GT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 305 "cparser/pre_parser.ml"
  )
    | GOTO of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 310 "cparser/pre_parser.ml"
  )
    | GEQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 315 "cparser/pre_parser.ml"
  )
    | GENERIC of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 320 "cparser/pre_parser.ml"
  )
    | FOR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 325 "cparser/pre_parser.ml"
  )
    | FLOAT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 330 "cparser/pre_parser.ml"
  )
    | EXTERN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 335 "cparser/pre_parser.ml"
  )
    | EQEQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 340 "cparser/pre_parser.ml"
  )
    | EQ of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 345 "cparser/pre_parser.ml"
  )
    | EOF
    | ENUM of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 351 "cparser/pre_parser.ml"
  )
    | ELSE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 356 "cparser/pre_parser.ml"
  )
    | ELLIPSIS of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 361 "cparser/pre_parser.ml"
  )
    | DOUBLE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 366 "cparser/pre_parser.ml"
  )
    | DOT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 371 "cparser/pre_parser.ml"
  )
    | DO of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 376 "cparser/pre_parser.ml"
  )
    | DIV_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 381 "cparser/pre_parser.ml"
  )
    | DEFAULT of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 386 "cparser/pre_parser.ml"
  )
    | DEC of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 391 "cparser/pre_parser.ml"
  )
    | CONTINUE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 396 "cparser/pre_parser.ml"
  )
    | CONSTANT of (
# 49 "cparser/pre_parser.mly"
      (Cabs.constant * Cabs.loc)
# 401 "cparser/pre_parser.ml"
  )
    | CONST of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 406 "cparser/pre_parser.ml"
  )
    | COMMA of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 411 "cparser/pre_parser.ml"
  )
    | COLON of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 416 "cparser/pre_parser.ml"
  )
    | CHAR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 421 "cparser/pre_parser.ml"
  )
    | CASE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 426 "cparser/pre_parser.ml"
  )
    | BUILTIN_VA_ARG of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 431 "cparser/pre_parser.ml"
  )
    | BUILTIN_OFFSETOF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 436 "cparser/pre_parser.ml"
  )
    | BREAK of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 441 "cparser/pre_parser.ml"
  )
    | BARBAR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 446 "cparser/pre_parser.ml"
  )
    | BAR of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 451 "cparser/pre_parser.ml"
  )
    | BANG of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 456 "cparser/pre_parser.ml"
  )
    | AUTO of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 461 "cparser/pre_parser.ml"
  )
    | ATTRIBUTE of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 466 "cparser/pre_parser.ml"
  )
    | ASM of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 471 "cparser/pre_parser.ml"
  )
    | AND_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 476 "cparser/pre_parser.ml"
  )
    | ANDAND of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 481 "cparser/pre_parser.ml"
  )
    | AND of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 486 "cparser/pre_parser.ml"
  )
    | ALIGNOF of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 491 "cparser/pre_parser.ml"
  )
    | ALIGNAS of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 496 "cparser/pre_parser.ml"
  )
    | ADD_ASSIGN of (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 501 "cparser/pre_parser.ml"
  )
  
end

include MenhirBasics

# 26 "cparser/pre_parser.mly"
  
  open Pre_parser_aux

  let set_id_type (_,r,_) t =
    r := t

  let declare_varname (i,_,_) =
    !declare_varname i

  let declare_typename (i,_,_) =
    !declare_typename i

  type 'id fun_declarator_ctx =
  | Decl_ident
  | Decl_other
  | Decl_fun of (unit -> unit)
  | Decl_krfun of 'id


# 528 "cparser/pre_parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | ADD_ASSIGN _ ->
          98
      | ALIGNAS _ ->
          97
      | ALIGNOF _ ->
          96
      | AND _ ->
          95
      | ANDAND _ ->
          94
      | AND_ASSIGN _ ->
          93
      | ASM _ ->
          92
      | ATTRIBUTE _ ->
          91
      | AUTO _ ->
          90
      | BANG _ ->
          89
      | BAR _ ->
          88
      | BARBAR _ ->
          87
      | BREAK _ ->
          86
      | BUILTIN_OFFSETOF _ ->
          85
      | BUILTIN_VA_ARG _ ->
          84
      | CASE _ ->
          83
      | CHAR _ ->
          82
      | COLON _ ->
          81
      | COMMA _ ->
          80
      | CONST _ ->
          79
      | CONSTANT _ ->
          78
      | CONTINUE _ ->
          77
      | DEC _ ->
          76
      | DEFAULT _ ->
          75
      | DIV_ASSIGN _ ->
          74
      | DO _ ->
          73
      | DOT _ ->
          72
      | DOUBLE _ ->
          71
      | ELLIPSIS _ ->
          70
      | ELSE _ ->
          69
      | ENUM _ ->
          68
      | EOF ->
          67
      | EQ _ ->
          66
      | EQEQ _ ->
          65
      | EXTERN _ ->
          64
      | FLOAT _ ->
          63
      | FOR _ ->
          62
      | GENERIC _ ->
          61
      | GEQ _ ->
          60
      | GOTO _ ->
          59
      | GT _ ->
          58
      | HAT _ ->
          57
      | IF _ ->
          56
      | INC _ ->
          55
      | INLINE _ ->
          54
      | INT _ ->
          53
      | LBRACE _ ->
          52
      | LBRACK _ ->
          51
      | LEFT _ ->
          50
      | LEFT_ASSIGN _ ->
          49
      | LEQ _ ->
          48
      | LONG _ ->
          47
      | LPAREN _ ->
          46
      | LT _ ->
          45
      | MINUS _ ->
          44
      | MOD_ASSIGN _ ->
          43
      | MUL_ASSIGN _ ->
          42
      | NEQ _ ->
          41
      | NORETURN _ ->
          40
      | OR_ASSIGN _ ->
          39
      | PACKED _ ->
          38
      | PERCENT _ ->
          37
      | PLUS _ ->
          36
      | PRAGMA _ ->
          35
      | PRE_NAME _ ->
          34
      | PTR _ ->
          33
      | QUESTION _ ->
          32
      | RBRACE _ ->
          31
      | RBRACK _ ->
          30
      | REGISTER _ ->
          29
      | RESTRICT _ ->
          28
      | RETURN _ ->
          27
      | RIGHT _ ->
          26
      | RIGHT_ASSIGN _ ->
          25
      | RPAREN _ ->
          24
      | SEMICOLON _ ->
          23
      | SHORT _ ->
          22
      | SIGNED _ ->
          21
      | SIZEOF _ ->
          20
      | SLASH _ ->
          19
      | STAR _ ->
          18
      | STATIC _ ->
          17
      | STATIC_ASSERT _ ->
          16
      | STRING_LITERAL _ ->
          15
      | STRUCT _ ->
          14
      | SUB_ASSIGN _ ->
          13
      | SWITCH _ ->
          12
      | TILDE _ ->
          11
      | TYPEDEF _ ->
          10
      | TYPEDEF_NAME _ ->
          9
      | UNDERSCORE_BOOL _ ->
          8
      | UNION _ ->
          7
      | UNSIGNED _ ->
          6
      | VAR_NAME _ ->
          5
      | VOID _ ->
          4
      | VOLATILE _ ->
          3
      | WHILE _ ->
          2
      | XOR_ASSIGN _ ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | ADD_ASSIGN _v ->
          Obj.repr _v
      | ALIGNAS _v ->
          Obj.repr _v
      | ALIGNOF _v ->
          Obj.repr _v
      | AND _v ->
          Obj.repr _v
      | ANDAND _v ->
          Obj.repr _v
      | AND_ASSIGN _v ->
          Obj.repr _v
      | ASM _v ->
          Obj.repr _v
      | ATTRIBUTE _v ->
          Obj.repr _v
      | AUTO _v ->
          Obj.repr _v
      | BANG _v ->
          Obj.repr _v
      | BAR _v ->
          Obj.repr _v
      | BARBAR _v ->
          Obj.repr _v
      | BREAK _v ->
          Obj.repr _v
      | BUILTIN_OFFSETOF _v ->
          Obj.repr _v
      | BUILTIN_VA_ARG _v ->
          Obj.repr _v
      | CASE _v ->
          Obj.repr _v
      | CHAR _v ->
          Obj.repr _v
      | COLON _v ->
          Obj.repr _v
      | COMMA _v ->
          Obj.repr _v
      | CONST _v ->
          Obj.repr _v
      | CONSTANT _v ->
          Obj.repr _v
      | CONTINUE _v ->
          Obj.repr _v
      | DEC _v ->
          Obj.repr _v
      | DEFAULT _v ->
          Obj.repr _v
      | DIV_ASSIGN _v ->
          Obj.repr _v
      | DO _v ->
          Obj.repr _v
      | DOT _v ->
          Obj.repr _v
      | DOUBLE _v ->
          Obj.repr _v
      | ELLIPSIS _v ->
          Obj.repr _v
      | ELSE _v ->
          Obj.repr _v
      | ENUM _v ->
          Obj.repr _v
      | EOF ->
          Obj.repr ()
      | EQ _v ->
          Obj.repr _v
      | EQEQ _v ->
          Obj.repr _v
      | EXTERN _v ->
          Obj.repr _v
      | FLOAT _v ->
          Obj.repr _v
      | FOR _v ->
          Obj.repr _v
      | GENERIC _v ->
          Obj.repr _v
      | GEQ _v ->
          Obj.repr _v
      | GOTO _v ->
          Obj.repr _v
      | GT _v ->
          Obj.repr _v
      | HAT _v ->
          Obj.repr _v
      | IF _v ->
          Obj.repr _v
      | INC _v ->
          Obj.repr _v
      | INLINE _v ->
          Obj.repr _v
      | INT _v ->
          Obj.repr _v
      | LBRACE _v ->
          Obj.repr _v
      | LBRACK _v ->
          Obj.repr _v
      | LEFT _v ->
          Obj.repr _v
      | LEFT_ASSIGN _v ->
          Obj.repr _v
      | LEQ _v ->
          Obj.repr _v
      | LONG _v ->
          Obj.repr _v
      | LPAREN _v ->
          Obj.repr _v
      | LT _v ->
          Obj.repr _v
      | MINUS _v ->
          Obj.repr _v
      | MOD_ASSIGN _v ->
          Obj.repr _v
      | MUL_ASSIGN _v ->
          Obj.repr _v
      | NEQ _v ->
          Obj.repr _v
      | NORETURN _v ->
          Obj.repr _v
      | OR_ASSIGN _v ->
          Obj.repr _v
      | PACKED _v ->
          Obj.repr _v
      | PERCENT _v ->
          Obj.repr _v
      | PLUS _v ->
          Obj.repr _v
      | PRAGMA _v ->
          Obj.repr _v
      | PRE_NAME _v ->
          Obj.repr _v
      | PTR _v ->
          Obj.repr _v
      | QUESTION _v ->
          Obj.repr _v
      | RBRACE _v ->
          Obj.repr _v
      | RBRACK _v ->
          Obj.repr _v
      | REGISTER _v ->
          Obj.repr _v
      | RESTRICT _v ->
          Obj.repr _v
      | RETURN _v ->
          Obj.repr _v
      | RIGHT _v ->
          Obj.repr _v
      | RIGHT_ASSIGN _v ->
          Obj.repr _v
      | RPAREN _v ->
          Obj.repr _v
      | SEMICOLON _v ->
          Obj.repr _v
      | SHORT _v ->
          Obj.repr _v
      | SIGNED _v ->
          Obj.repr _v
      | SIZEOF _v ->
          Obj.repr _v
      | SLASH _v ->
          Obj.repr _v
      | STAR _v ->
          Obj.repr _v
      | STATIC _v ->
          Obj.repr _v
      | STATIC_ASSERT _v ->
          Obj.repr _v
      | STRING_LITERAL _v ->
          Obj.repr _v
      | STRUCT _v ->
          Obj.repr _v
      | SUB_ASSIGN _v ->
          Obj.repr _v
      | SWITCH _v ->
          Obj.repr _v
      | TILDE _v ->
          Obj.repr _v
      | TYPEDEF _v ->
          Obj.repr _v
      | TYPEDEF_NAME _v ->
          Obj.repr _v
      | UNDERSCORE_BOOL _v ->
          Obj.repr _v
      | UNION _v ->
          Obj.repr _v
      | UNSIGNED _v ->
          Obj.repr _v
      | VAR_NAME _v ->
          Obj.repr _v
      | VOID _v ->
          Obj.repr _v
      | VOLATILE _v ->
          Obj.repr _v
      | WHILE _v ->
          Obj.repr _v
      | XOR_ASSIGN _v ->
          Obj.repr _v
  
  and default_reduction =
    (16, "\000\192\000\001\000\000\001O\001P\001X\001B\001Y\000\181\000\000\001A\0014\001W\001R\001N\0016\000\000\001_\000\000\000\000\001k\0017\001h\000\000\000\000\001\005\001i\001j\000\000\000\000\000\000\001T\001S\000\000\000\000\000\000\000\000\000\000\001\006\000\000\000\000\000\000\000\000\001U\000\000\000\000\000\000\000\000\000\000\000\153\000\151\000\150\000\152\000\149\000\000\000\000\001l\001g\000\000\000\000\001V\001Q\000\234\000\235\000\000\001M\000\000\000\000\000\000\000:\000\000\0018\000\250\000\000\000\000\001\001\000\000\000\000\000,\000(\000*\000-\000$\000&\000)\000#\000%\000+\000'\000\000\000\000\001\031\001\030\000\000\000\000\000\201\000\202\000\203\000\000\001\t\000\200\000\199\000\000\000\n\000\011\000\000\000\000\000\000\001\012\001\014\001\r\001\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\134\000\000\000>\000\133\000\000\000\000\000\"\000\000\000\252\000\014\000\000\000\000\000\015\000\000\000\000\000\251\001\002\000\000\001\000\001\003\001c\000\190\000\000\001(\001)\001Z\000\000\000\000\000\000\001;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\001C\000\234\000\000\001K\001L\000\190\000\000\000\191\001[\001*\000\000\000\234\000\000\000\190\000\000\001<\001:\000\000\000\000\000c\000\000\000b\001\024\000\000\000\000\000\234\000\000\000\000\001\024\000\000\000\000\000\159\000\142\000\141\0013\0015\000\181\000\000\000\183\000\182\000\184\000\185\000\186\000\000\000L\000I\000H\000K\000\187\000J\000\000\000\000\001\020\000\000\001\022\000\000\001\023\001\021\000\000\000\181\000\000\000\186\000\000\001\024\000?\000\000\000\000\000\249\000\247\000\000\000\000\000\000\000\000\000\246\000\000\000\234\000\000\000\238\000o\000\000\000\239\000\000\000\234\000\000\000\000\000\000\000\000\000\000\000q\000\215\000r\000\000\000\234\000\000\000t\000\000\000\000\000a\000\000\0003\000\000\000s\000\000\000n\000\000\000p\000\245\000\000\000\234\000\000\000\000\000\000\000\244\000g\000\207\000\000\000v\000\000\000\000\000\000\000\160\000\000\000u\000\000\000\000\001@\000\000\000\000\001>\000\000\001?\000\000\0019\000\000\000\000\000\000\000\234\000\000\000\190\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\234\000\000\001J\000\209\000\000\0000\000\000\001f\000\000\000\000\000\000\000\146\000\000\000\145\000\000\000\000\000.\000\000\000\148\000\147\000\000\000\000\000\000\000z\000\000\000\000\000i\000\000\000\000\000|\000~\000\000\000x\000}\000\000\000\000\000\000\000\000\000\254\000\000\000\000\000\000\000k\000\000\000l\000m\000\000\000\255\000\000\000\000\000\000\000\253\001b\000\000\000\000\000\000\000\000\000\157\000\000\000\000\000\156\000\154\000\000\000\158\000\000\000\155\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\169\0008\000\000\000j\000\219\000\000\0009\000\168\000\000\000\000\001\004\000\000\001\b\001a\000\000\000\000\000;\000\000\000\000\001df\001]\000\000\000A\000\000\000\000\000@\000\000\000\000\000\167\001\024\000\000\000\000\000\000\000\165\000h\000\166\000\137\000\000\000\000\000w\000\000\001\025\000\000\000\000\000\000\000\000\000\000\000\171\000\180\000\000\0005\0004\0007\000\213\000\138\001E\000\000\000\000\000D\000\000\000\000\000C\001\024\000\000\000\181\000\000\000\186\000\000\000\000\000\181\000\000\000\186\000\000\000F\000\000\000\000\000\177\000\000\000G\000\000\000\139\000\000\001F")
  
  and error =
    (99, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\139\0280\202\004\024\006d\004\128\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003pH\193\132P \1921 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\b\148\000\020\005\000\130\000\005\006 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137@\001@P\b \000Pb\012\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\1852\224\130\160\176PP\144\178\197\028\b\128\000\000\000\000\000\000\000\000\000\000\006\228\203\130\n\130\193ABB\203\020p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002%\000\005\001@ \128\001A\1360nL\184 \168,\020\020$,\177G\000\000\000\000\000\001\000\000\000\000\000\000\000\001\018\128\002\128\160\016@\000\160\196\024\000\"P\000P\020\002\b\000\020\024\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017(\000(\n\001\004\000\n\012A\128\000\000\000\000\000@\000\000\000\000\000\000n\bb \000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\r\193\003\004\017\000\130\000\132\128\144\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\rbn\001\004\000\n\012A\143\255\255\255\255\255\255\255\255\255\255\255\253\255\255\255\255\255\255\255\255\255\255\255\255\191\255\255\255\255\255\255\255\255\255\255\255\240\001\018\128\002\128\160\016@\000\160\196\024\255\255\255\255\255\255\255\255\255\255\255\255\192\004J\000\n\002\128A\000\002\131\016c\255\255\255\255\255\255\255\255\255\255\255\255\000\017(\000(\n\001\004\000\n\012A\143\255\255\255\255\255\255\255\255\255\255\255\252\000D\160\000\160(\004\016\000(1\006?\255\255\255\255\255\255\255\255\255\255\255\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004J\000\n\002\128A\000\002\131\016c\255\255\255\255\255\255\255\255\255\255\255\255\127\255\255\255\255\255\255\255\255\255\255\255\224\002%\000\005\001@ \128\001A\1361\255\255\255\255\255\255\255\255\255\255\255\255\191\255\255\255\255\255\255\255\255\255\255\255\247\255\255\255\255\255\255\255\255\255\255\255\254\255\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\0000\000\000\000\137@\001@P\b \000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\016\000(1\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"P\000P\020\002\b\000\020\024\131\031\255\255\255\255\255\255\255\255\255\255\255\248\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000@\000\000\001\018\128\002\128\160\016@\000\160\196\024\000\000\000\000\000\000\000\000\000\000\000\000\000\004J\000\n\002\128A\000\002\131\016`b \bH\t\000\130\000\000\000\000\000\002\000\000\000\000\000\000\000\002%\000\005\001@ \128\001A\1360\000\000\000\000\000\000\000\000\000\002\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\255\255\255\255\255\255\255\255\255\255\255\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003p@\193\004@ \128! $\002\bb\000\b\000\128\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\004\001\004@@\000\000\000 \002\t\255\255\255\255\255\255\255\255\255\255\255\255\128\000\000\000\000\000\000\000\000\000\000\000\001\184$h\194(\016`\024\144\018\003\004\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\006\b\194(! \b\000\024\003\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\t\1540\138\012X\006$\006\128\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\255\255\255\255\255\255\255\255\255\255\255\253\255\255\255\255\255\255\255\255\255\255\255\255\128\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\254\000\000\000\000\000\000\000\000\000\000\000\000\031\255\255\255\255\255\255\255\255\255\255\255\248\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001p@\192\004\000 \128! \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\0000F\017A\t\000@\000\192\024 \000\000\000\000\000\000\000\000\000\000\000\0007\004\205\024E\006,\003\018\003@`\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\003pH\193\132P \1921`$\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\b\002\000!\000\000\000\b\000\0007\004\205\024E\006,\003\018\002@`\134\224\153\131\b\160\197\128b@H\012\016\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\148\005\021\005\000\130\000\005\134(\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\191\255\255\255\255\255\255\255\255\255\255\255\241\184$h\194(\016`\024\144\018\003\0047\004\140\024E\002\012\003\018\002@`b\000\000\000\000\000\000\b\000\000\000\000\000\000@\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\002\000\000\000\000\016\000\016\001\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\004J\000\n\002\128A\000\002\131\016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\128 \000\000\000\000\016\001\004\255\255\255\255\255\255\255\255\255\255\255\255\198\224\129\130\b\128A\000B@H\004\016\000\000\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\224\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\128\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\198\224\153\163\b\160\197\128b@H\012\016\220\0190a\020\024\176\012H\tb\000\000\000\"P\000P\020\002\b\000\020\024\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\255\255\255\255\255\255\255\255\255\255\255\240\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000 \000\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\128\000\000\000\002%\000\005\001@ \128\001A\1360\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000n\b\024 \136\004\016\004$\004\128A\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\220\0160A\016\b \bH\137\000\130\000\000\000\000\000\000\000\000\000\000@\000\000\002%\000\005\001@ \128\001A\1360\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\001\018\128\002\128\160\016@\000\160\196\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003p@\193\004@ \128!\"$\002\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\"P\000P\0202\b\001\020\024\131\000\004J\000\n\002\130A\000\002\131\016`\000\137@\001@P\200 \004Pbb\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\001\1320\138\b\b\002\000\004\000\193\000\000\000\000\000\000\000\000\000\000\000\000\001\184&p\194(0`\024\144\018\003\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\004\012!\132P@@\016\000 \006\b\000\000\000\000\000\000\000\000\000\000\000\000\b\0000\134\017A\001\000@\000\128\024 \000\000\000\000\000\000\000\000\000\000\000\0007D\206\024E\006\012\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\000\220\0198a\020\0240\012H\t\001\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000.\136\024\000\128\004\016\004$\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\001\184$`\194(\016`\024\144\018\003\004\000\000\000\000\000\000\000\000\000\000\000\000\004\000\024C\b\160\128\128 \000@\012\016\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\001\137\001 0@\000\000\000\000\000\000\000\000\000\000\000\000@\129\1320\138\b\b\002\000\004\000\193\000\000\000\000\000\000\000\000\000\000\000\000\001\000\006\016\194(  \b\000\016\003\004\000\000\000\000\000\000\000\000\000\000\000\000\006\232\153\195\b\160\193\128b@H\012\016\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\001\137\001 0@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\187\190\241\211\168\176\249x\149\243\231\156\000\"R\000P\020\002\bb\006JD\n\002\130e\128\023\135\146`\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000@\000\000\000 \000\000@\000\000\000\000\b\000\000\000\004\000\000\b\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\004\000\000\000\000\004A\000 \000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\"P\000P\020\002\bbv}\225\133Q`\224\177!e\1428\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\002\006\016\194(  \b\000\016\003\004\000\000\000\000\000\000\000\000\000\000\000\000\006\232\153\195\b\160\193\128b@H\012\016\000\000\000\000\000\000\000\000\000\000\000\000\011\162\006\000 \001\004\001\t\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000@\129\1320\138\b\b\002\000\004\000\193\000\000\000\000\000\000\000\000\000\000\000\000\001\186&p\194(0`\024\144\018\003\004\000\000\000\000\000\000\000\000\000\000\000\000\000\004J@\n\002\128A\000\002\131\016`\000\137D\001@P\b \000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\004\003%\"\005\001A2\192\011\195\2010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\bb\000\020\024\131\000\000\000 \000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\129\1320\138\b\bb\b\002\000\004\000\193\000\000\000\000\000\000\000\000\000\000\000\000\001\184&p\194(0`\024\144\018\003\004\023\004\012\000@\002\b\002\018\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\003\ba\020\016\016\004\000\b\001\130\000\000\000\000\000\000\000\000\000\000\000\000\003pL\225\132P`\1921 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\128\016\001\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\224\145\131\b\160C\128b@H\012\016\000\000\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\224\000\000\000\000\000\000\000\000\000\000\000\000n\t\0280\138\0048\006\164\006\128\193\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    1
  
  and action =
    ((16, "\000\000\000\000-\218\000\000\000\000\000\000\000\000\000\000\000\000*\026\000\000\000\000\000\000\000\000\000\000\000\000+\180\000\000+\1666\028\000\000\000\000\000\0008X,\026\000\000\000\000\000\000-\028,^-\028\000\000\000\0008\202-\028+\2026\0288\202\000\000,f6\028,h6\218\000\000\000\003,j,\132,`,\136\000\000\000\000\000\000\000\000\000\000+\228,^\000\000\000\000,\1366\218\000\000\000\000\000\000\000\000\000\194\000\000,\150-\0286\028\000\000\001\134\000\000\000\000\002J+\176\000\0007\186\003\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\028\003\210\000\000\000\0006\028\004\150\000\000\000\000\000\0006\028\000\000\000\000\000\000\005Z\000\000\000\0006\028\006\030\006\226\000\000\000\000\000\000\000\0006\028\007\166\bj\t.6\028\t\2426\028\n\1826\028\011z6\028\012>\000\000\000\0006\028\r\002\r\1986\028\014\138\015N\016\018\016\214+@6\028\000\000\000\0006\028\000\000\000\0006\028\017\154\000\000-L\000\000\000\000+\1386\028\000\0006\028,\158\000\000\000\000+\176\000\000\000\000\000\000\000\000\018^\000\000\000\000\000\000\000\003+\176-&\000\0006\218-B6\028-\002+\160+\226-\128\000\000\000\000\000\000\019\"\000\000\000\000\000\000\019\230\000\000\000\000\000\0007\134\000\000\020\170\000\000\021n\000\000\000\000+\254,\138\000\000-\190\000\000\000\000+\142-\178\000\000-\018\0222\000\0005\168,\158\000\000\000\000\000\000\000\000\000\000\000\000.\188\000\000\000\000\000\000\000\000\000\000.|\000\000\000\000\000\000\000\000\000\000\000\000\022\246\023\186\000\000\024~\000\000\025B\000\000\000\000*\026\000\000/^\000\000/\030\000\000\000\000,H-\218\000\000\000\000,\142/\1922\246,\174\000\000-r\000\0006\028\000\000\000\000-\198\000\000-\246\000\000\026\006\026\202/\192*\026-\236\000\000\000\000\000\000\027\142\000\0006\028\000\000\028R\000\003\000\000\000\003\000\000-\242\000\000-\252\000\000-\254\000\000\000\000.\012\000\000\029\022\029\218\030\158\000\000\000\000\000\000.\004\000\000,\178-\246.2\000\000.\014\000\000,\194+\142\000\000-\1666\028\000\000+\174\000\000.\028\000\000\000\194\031b7\134\000\000 &\000\000 \234.\028\000\000!\174/\192-\218.*\000\000\"r\000\000\000\000-\012\000\000. \000\000-\1786\028-\028\000\000.$\000\000-\030.&\000\000,`\000\000\000\000+\176-\244+\176\000\000,v,\146\000\000,\2426\028\000\000\000\000. \000\000\000\000#6-\196+\176,\164\000\000+D6\028..\000\000+\176\000\000\000\000,\220\000\000-\2046\218.>\000\000\000\000-\2086\218-\2086\028\000\000-\2106\028\000\000\000\000-,\000\0006\218\000\000.F#\2507\0146\0287\014,\1987\0146\028\000\000\000\000+j\000\000\000\000.<\000\000\000\000,\198.>\000\000,\158\000\000\000\000.P7\186\000\000.V#\250\000\000-R\000\000\000\000::\000\0003z\000\000\000\000\000\000\000\00096\000\000:z\000\0000D\000\0003\254\000\000\000\0006\218\000\000*\026\000\000:\186\000\0004\130\000\0009z\000\000:\250\000\0000\200\000\0005\006\000\000-|\000\000+\1606\028.d\000\000,\236\000\000-`$\190\000\000+\176.f\000\000-\244+\160.l\000\0006\028.\000+\160.v\000\000,\000,\000,\000\000\000\000\000.N+\160+\212%\130+\176.r\000\000&F%\130\000\000+\160+\2166\028-T\000\000-(%\130-N+\160'\n-`+\160'\206\000\000.\128.\132\000\000\000\000\000\000-|.\\6\028-l+\160\000\000.\140\000\000\000\000\000\000\000\000.\026+\160\000\000\000\000\000\000\000\000.b6\028-p+\160\000\000.h6\028-v\000\000+\160(\146\000\000.j,^\000\000\000\0009\186\000\0001L\000\0006\218\000\0009\250\000\0001\208\000\0007\1868,\000\000+\160\000\000-x\000\000-j\000\000,\202-\132+\142\000\000\000\000\000\000\000\000.\156\000\000-,.\160\000\000-\136+\142\000\000\000\000\000\003)V6\028\000\000\000\000\000\000\000\000.>+\160\000\000+\160\000\000.\206.xnn}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\001*\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\0012\005}\005}\005}\005}\002Z\005}\005}\005}\002f\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\002j\005}\005}\005}\002r\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}\005}b\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\001n\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\001r\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\001~q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\001\158\004q\004q\004q\004q\004q\004q\004q\001\162\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\004q\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\001~\001\130\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\001\134\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\178\001\249\001\249\001\182\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\186\001\249\001\190\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\001\249\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\001n\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\001r\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\001\158\004m\004m\004m\004m\004m\004m\004m\001\162\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004m\004mr\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\003\r\001\218\003\r\003\r\003\r\003\r\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\001\226\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\t\003\tr\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\006\002\r\002\r\002\rt\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\006\002\t\002\t\002\t~\004\149\004\149\004\149\004\149\004\149\000\130\004\149\004\149\004\149\004\149\004\149\004\149\004\149\004\149\004\149\000\174\004\149\004\149\004\149\004\149\000\178\004\149\004\149\000\242\004\149\004\149\004\149\004\149\004\149\004\149\004\149\001\006\004\149\004\149\000\246\004\149\004\149\004\149\004\149\004\149\004\149\004\149\004\149\000\182\004\149\004\149\004\149\004\149\004\149\001\n\004\149\004}\004}\000\014\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\000:\004}\004}\004}\004}\004}\004}\004}\004}\004}\000J\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\001\006\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\004}\000\182\004}\004}\004}\004}\004}\001\n\004}\004\133\004\133\000\014\000\018\004\133\000\022\000\026\000\030\004\133\004\133\004\133\004\133\004\133\000*\004\133\004\133\004\133\004\133\004\133\004\133\0002\0006\004\133\004\133\004\133\004\133\004\133\000:\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000J\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000~\004\133\004\133\004\133\004\133\004\133\000\130\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000\174\004\133\004\133\004\133\004\133\000\178\004\133\004\133\000\242\004\133\004\133\004\133\004\133\004\133\004\133\004\133\001\006\004\133\004\133\000\246\004\133\004\133\004\133\004\133\004\133\004\133\004\133\004\133\000\182\004\133\004\133\004\133\004\133\004\133\001\n\004\133\004\129\004\129\000\014\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\000:\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\000J\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\001\006\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\000\182\004\129\004\129\004\129\004\129\004\129\001\n\004\129\004\137\004\137\000\014\000\018\004\137\000\022\000\026\000\030\004\137\004\137\004\137\004\137\004\137\000*\004\137\004\137\004\137\004\137\004\137\004\137\0002\0006\004\137\004\137\004\137\004\137\004\137\000:\004\137\004\137\004\137\004\137\004\137\004\137\004\137\004\137\004\137\000J\004\137\004\137\004\137\004\137\004\137\004\137\004\137\004\137\000~\004\137\004\137\004\137\004\137\004\137\000\130\004\137\004\137\004\137\004\137\004\137\004\137\004\137\004\137\004\137\000\174\004\137\004\137\004\137\004\137\000\178\004\137\004\137\000\242\004\137\004\137\004\137\004\137\004\137\004\137\004\137\001\006\004\137\004\137\000\246\004\137\004\137\004\137\004\137\004\137\004\137\004\137\004\137\000\182\004\137\004\137\004\137\004\137\004\137\001\nn\004A\004=\004=\000\014\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\000.\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\000:\000>\004=\004=\004=\004=\004=\004=\004=\004=\000J\004=\003>\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\003B\004=\004=\004=\004=\004=\004=\004=\004=\004=\003F\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\001\006\004=\004=\004=\004=\004=\004=\004=\004=\004=\004=\003J\000\182\004=\004=\004=\004=\004=\001\n\004=\004E\004E\000\014\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\000.\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\000:\000>\004E\004E\004E\004E\004E\004E\004E\004E\000J\004E\003>\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\003B\004E\004E\004E\004E\004E\004E\004E\004E\004E\003F\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\001\006\004E\004E\004E\004E\004E\004E\004E\004E\004E\004E\003J\000\182\004E\004E\004E\004E\004E\001\n\004E\004I\004I\000\014\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\000.\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\000:\000>\004I\004I\004I\004I\004I\004I\004I\004I\000J\004I\003>\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\003B\004I\004I\004I\004I\004I\004I\004I\004I\004I\003F\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\001\006\004I\004I\004I\004I\004I\004I\004I\004I\004I\004I\003J\000\182\004I\004I\004I\004I\004I\001\n\004I\000\017\000\017\000\014\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\002\241\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000:\000\017\000\017\000\017\000\017\000\017\003\006\000\017\000\017\000\017\000J\000\017\000\017\000\017\000\017\000\017\000\017\000\017\003\214\000\017\000\017\000\017\000\017\003u\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\001\006\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\182\000\017\000\017\000\017\000\017\000\017\001\n\000\017\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\004\018\000\025\000\025\000\025\000\025\003yyu\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\001\006\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\182\000\005\000\005\000\005\000\005\000\005\001\n\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\004\018\000\r\000\r\000\r\000\r\003y\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\004\018\000\t\000\t\000\t\000\t\003y\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\003\153\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\004\145\004\145\000\014\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\000:\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\000J\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\001\006\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\004\145\000\182\004\145\004\145\004\145\004\145\004\145\001\n\004\145\004\153\004\153\000\014\000\018\004\153\000\022\000\026\000\030\004\153\004\153\004\153\004\153\004\153\000*\004\153\004\153\004\153\004\153\004\153\004\153\0002\0006\004\153\004\153\004\153\004\153\004\153\000:\004\153\004\153\004\153\004\153\004\153\004\153\004\153\004\153\004\153\000J\004\153\004\153\004\153\004\153\004\153\004\153\004\153\004\153\000~\004\153\004\153\004\153\004\153\004\153\000\130\004\153\004\153\004\153\004\153\004\153\004\153\004\153\004\153\004\153\000\174\004\153\004\153\004\153\004\153\000\178\004\153\004\153\000\242\004\153\004\153\004\153\004\153\004\153\004\153\004\153\001\006\004\153\004\153\000\246\004\153\004\153\004\153\004\153\004\153\004\153\004\153\004\153\000\182\004\153\004\153\004\153\004\153\004\153\001\n\004\153\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\002\237\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\003=\004\250\003=\003=\003=\003=\003uu\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\001\006\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\182\000\017\000\017\000\017\000\017\000\017\001\na\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\004\017\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000a\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\007\138\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\007\154\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000qe\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\b^\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004et~\000\197\000\197\000\197\000\197\000\197\000\130\003B\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\174\003F\000\197\000\197\000\197\000\178\000\197\000\197\000\242\000\197\000\197\000\197\000\197\000\197\000\197\000\197\001\006\000\197\000\197\000\246\000\197\000\197\000\197\000\197\000\197\000\197\000\197\003J\000\182\000\197\000\197\000\197\000\197\000\197\001\n\000\197\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\004]\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\t\006\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\002\141\004]\000\014\000\018\005\166\000\022\000\026\000\030\002\237\000\"\000R\004]\003I\000*\000V\002\162\000.\000Z\000F\000^\0002\0006\003}\003q\003\006\005\178\007\022\000:\000>\004\241\007&\002\030\002*\007*\0072\000j\003\022\000J\006:\003>\001\030\000\194\001\030\000n\003q\000z\000~\001\030\000N\000=\007j\004]\000\130\003B\000\134\004]\002\182\002=\0076\003\149\000\142\004]\000\174\003F\002\237\000f\000\146\000\178\002R\003\157\000\242\003]\004]\007\170\007B\000\150\007J\000\154\001\006\000\222\003\006\000\246\007R\000\158\000\166\007^\004\241\003a\000\226\003J\000\182\007f\003\022\000M\000\230\000\234\001\n\000\014\000\018\000f\000\022\000\026\000\030\000F\000\"\000R\007\134\003\221\000*\000V\002\162\000.\000Z\002=\000^\0002\0006\bj\003E\0029\000\198\003\n\000:\000>\000F\003\021\007n\003]\000v\000\194\000j\003:\000J\000\202\003>\000F\002\237\003-\000n\003\n\000z\000~\0035\000F\000\162\000\170\000\186\000\130\003B\000\134\006^\0031\003\006\005\158\000\194\000\142\002b\000\174\003F\000\190\003\137\000\238\000\178\003\198\003\214\000\242\002\237\003\161\001\014\003u\000\150\003\173\000\154\001\006\000\206\0029\000\246\003-\000\158\000\166\003m\005\194\003\006\000\226\003J\000\182\005j\000\014\003\129\000\230\000\234\001\n\003\165\000\018\003\022\000\022\000\026\000\030\0035\001\233\000R\003m\002\241\000*\000V\005\026\002\030\000Z\003q\000^\0002\0006\000:\0052\005B\002\237\004\150\003\165\003\006\000A\003\141\006\002\000J\000v\004\174\000j\006&\003\165\007.\003q\003\022\003\006\000F\000n\005v\000z\000~\002F\000E\007\242\006\130\007\178\000\130\003\022\000\134\002\030\002\154\000I\001\233\b2\000\142\b\186\000\174\007\254\002\166\b>\002\174\000\178\bR\b\178\000\242\002R\002\186\001\006\003\177\000\150\003\145\000\154\003\165\002R\005J\000\246\t>\000\158\000\166\000\182\007\186\006\006\000\226\003\018\003\165\001\n\003\"\003\234\000\230\000\234\003\165\000\014\000\018\007\014\000\022\000\026\000\030\bF\000\"\007\194\002R\002\030\000*\bb\002\162\000.\002\237\007\206\003\254\0002\0006\006\150\002\030\002\030\004]\002\030\000:\000>\002\030\002\030\004\006\004\030\000B\006\154\004R\b\198\000J\b\242\003>\004Z\004b\004n\002\030\004\142\004\250\000~\004\154\004\158\004\166\003u\002-\000\130\003B\004\186\004\206\004\242\005\006\005\"\005*\005:\005F\000\174\003F\005^\005\134\006\159\000\178\005\150\003\202\000\242\005\174\005\202\005\210\005\222\005\230\005\242\006\018\001\006\006F\006V\000\246\006j\000\014\000\018\006v\000\022\000\026\000\030\003J\000\182\007\030\007>\007F\000*\007N\001\n\000.\001Y\007Z\007b\0002\0006\007~\001Y\007\146\007\222\007\226\000:\000>\007\246\b\n\b\030\b6\001Y\000\014\bJ\bf\000J\b\222\003>\b\234\t\030\t2\t6\tB\001Y\000~\tn\000.\001Q\001Y\tz\000\130\003B\t\182\001Q\000\000\000\000\000\000\000:\000>\000\000\000\174\003F\000\000\001Q\000\000\000\178\000\000\000J\000\242\003>\000\000\000\000\000\000\000\000\000\000\001Q\001\006\001Y\000\000\000\246\001Q\000\014\000\018\003B\000\022\000\026\000\030\003J\000\182\000\000\000\000\000\000\000*\003F\001\n\000.\001]\000\000\000\000\0002\0006\000\000\001]\000\000\000\000\000\000\000:\000>\001\006\001Q\000\000\000\000\001]\000\014\000\000\000\000\000J\000\000\003>\003J\000\182\000\000\000\000\000\000\001]\000~\001\n\000.\001U\001]\000\000\000\130\003B\000\000\001U\000\000\000\000\000\000\000:\000>\000\000\000\174\003F\000\000\001U\000\000\000\178\000\000\000J\000\242\003>\000\000\000\000\000\000\000\000\000\000\001U\001\006\001]\000\000\000\246\001U\004]\004]\003B\004]\004]\004]\003J\000\182\000\000\000\000\000\000\004]\003F\001\n\004]\004]\000\000\000\000\004]\004]\000\000\003U\000\000\000\000\000\000\004]\004]\001\006\001U\000\000\000\000\004]\000\000\000\000\000\000\004]\000\000\004]\003J\000\182\000\000\000\000\000\000\004]\004]\001\n\000\000\000\000\004]\000\000\004]\004]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004]\004]\000\000\000\000\000\000\004]\000\014\000\018\004]\000\022\000\026\000\030\000\000\006\186\000\000\000\000\004]\000*\000\000\004]\000.\001I\000\000\000\000\0002\0006\001I\004]\004]\000\000\000\000\000:\000>\000\000\004]\000\000\000\000\001I\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001I\000~\000\000\000\000\000\000\000\000\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003F\000\000\000\000\000\000\000\178\000\014\000\018\000\242\000\022\000\026\000\030\000\000\006\254\000\000\000\000\001\006\000*\000\000\000\246\000.\001M\000\000\000\000\0002\0006\001M\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\000\000\000\000\001M\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001M\000~\000\000\000\000\000\000\000\000\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003F\000\000\000\000\000\000\000\178\000\014\000\018\000\242\000\022\000\026\000\030\000\000\006\186\000\000\000\000\001\006\000*\000\000\000\246\000.\0019\000\000\000\000\0002\0006\0019\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\000\000\000\000\0019\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\0019\000~\000\000\000\000\000\000\000\000\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003F\000\000\000\000\000\000\000\178\000\014\000\018\000\242\000\022\000\026\000\030\000\000\006\254\000\000\000\000\001\006\000*\000\000\000\246\000.\001=\000\000\000\000\0002\0006\001=\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\000\000\000\000\001=\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001=\000~\000\000\000\000\000\000\000\000\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003F\000\000\000\000\000\000\000\178\000\014\004I\000\242\004I\004I\004I\000\000\000\000\000\000\000\000\001\006\004I\000\000\000\246\000.\000\000\000\000\000\000\004I\004I\000\197\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\000\000\000\000\004I\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\000\000\004I\000\000\000\000\000\000\000\000\000\197\004I\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004I\003F\000\000\000\197\000\000\004I\000\000\000\000\004I\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\006\000\197\000\000\004I\000\000\000\014\000\018\000\000\000\022\000\026\000\030\003J\000\182\000\000\000\000\000\000\000*\000\000\001\n\000.\002\237\000\000\000\000\0002\0006\000\000\000\000\000\000\000\000\000\000\000:\000>\000\000\000\000\000\000\000\000\003\222\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\003\214\000~\000\000\000\000\000\000\003u\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003F\000\000\000\000\000\000\000\178\000\014\000\018\000\242\000\022\000\026\000\030\000\000\000\000\000\000\000\000\001\006\000*\000\000\000\246\000.\001q\000\000\000\000\0002\0006\001q\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\000\000\000\000\001q\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001q\000~\000\000\000\000\000\000\000\000\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003F\000\000\000\000\000\000\000\178\000\014\000\018\000\242\000\022\000\026\000\030\000\000\000\000\000\000\000\000\001\006\000*\000\000\000\246\000.\001y\000\000\000\000\0002\0006\001y\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\000\000\000\000\001y\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001y\000~\000\000\000\000\000\000\000\000\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003F\000\000\000\000\000\000\000\178\000\014\000\018\000\242\000\022\000\026\000\030\000\000\000\000\000\000\000\000\001\006\000*\000\000\000\246\000.\001u\000\000\000\000\0002\0006\001u\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\000\000\000\000\001u\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001u\000~\000\000\000\000\000\000\000\000\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003F\000\000\000\000\000\000\000\178\000\014\000\018\000\242\000\022\000\026\000\030\000\000\000\000\000\000\000\000\001\006\000*\000\000\000\246\000.\001}\000\000\000\000\0002\0006\001}\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\000\000\000\000\001}\002\209\000\000\000\000\000J\000\000\003>\000\000\002\209\000\000\000\000\000\000\001}\000~\000\000\002\209\002\209\000\000\000\000\000\130\003B\002\209\000\000\000\000\000\000\000\000\002\209\002\209\000\000\000\174\003F\000\000\002\209\000\000\000\178\000\000\002\209\000\242\002\209\000\000\000\000\000\000\000\000\000\000\002\209\001\006\000\000\000\000\000\246\000\000\000\014\000\018\002\209\000\022\000\026\000\030\003J\000\182\000\000\000\000\000\000\000*\002\209\001\n\000.\000\000\000\000\000\000\0002\0006\000\000\003\133\000\000\000\000\000\000\000:\000>\002\209\000\000\002]\000\000\0036\000\000\000\000\000\000\000J\000\000\003>\002\209\002\209\000\000\000\000\000\000\000\000\000~\002\209\000\000\000\000\000\000\000\000\000\130\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\174\003F\000\000\000\000\000\000\000\178\000R\000\000\000\242\000\000\000V\000\000\000\000\000Z\000\000\000^\001\006\000\000\003}\000\246\000\000\000\000\000\000\000:\000\000\003\242\000\000\003J\000\182\000b\000\000\000j\000\000\000J\001\n\000\000\000\000\000\000\000\000\000n\000\000\000z\000\000\000\000\000\000\000\000\000\000\006\030\000\000\000\000\000\134\000\000\000\000\000\000\000\000\000\000\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\150\000\000\000\154\001\006\000\000\000\000\000\000\000\000\000\158\000\166\000\000\000\000\000\000\000\226\000\000\000\182\000\000\000\000\000\000\000\230\000\234\001\n\003\165\000\018\000\000\000\022\000\026\000\030\000\000\006\206\000\000\000\000\000\000\000*\000\000\002\162\000\000\000\000\000\000\000\000\0002\0006\000\000\000\000\000\000\000\000\000\000\003\165\000\000\000\000\002\190\000\000\000\000\000B\000\000\000\000\003e\003\165\000\000\000\000\003e\000\000\000\000\003e\000\000\003e\000~\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\000\000\0031\000\000\000\000\003e\000\000\003e\000\174\000\000\000\000\000\000\000\000\000\178\000\000\003e\000\242\003e\000\000\000\000\005\226\000\000\003m\003e\003\165\000\000\003e\000\246\000\000\000\000\000\000\000\000\003e\000\000\003\169\000\018\003\165\000\022\000\026\000\030\000\000\000\000\003\165\003m\000\000\000*\000\000\003e\000\000\003e\000\000\000\000\0002\0006\000\000\003e\003e\000\000\000\000\003\169\003e\000\000\000\000\000\000\000\000\000B\003e\003e\000R\003\169\000\000\000\000\000V\000\000\000\000\000Z\000\000\000^\000~\000\000\bj\003E\000\000\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000b\000\000\000j\000\174\000\000\000\000\000\000\000\000\000\178\000\000\000n\000\242\000z\000\000\000\000\000\000\000\000\000\000\006\022\003\169\000\000\000\134\000\246\000\000\000\000\000\000\000\000\000\142\000\000\000\000\000\000\003\169\000\000\000\000\000R\000\000\000\000\003\169\000V\000\000\000\000\000Z\000\150\000^\000\154\000\000\000\000\b\162\000\000\000\000\000\158\000\166\000\000\000\000\000\000\000\226\000R\000b\000\000\000j\000V\000\230\000\234\000Z\000\000\000^\000\000\000n\000\000\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000b\000\000\000j\000\000\000\000\000\142\000\000\000\000\000\000\000\000\000n\000\000\000r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\150\000\134\000\154\000\000\000\000\000\000\000\000\000\142\000\158\000\166\000\000\000\000\000\000\000\226\000R\000\000\000\000\000\000\000V\000\230\000\234\000Z\000\150\000^\000\154\000\000\000\000\000\000\000\000\000\000\000\158\000\166\000\000\000\000\000\000\000\226\000\000\000b\000\000\000j\000\000\000\230\000\234\000\000\000\000\000\000\000\000\000n\000\000\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000\000\000\014\000\000\000\000\000\000\000\142\000\000\000\000\006\170\000\000\000\000\000\000\000\000\000\000\000\000\000.\001A\000\000\000\000\000\000\000\150\001A\000\154\000\000\000\000\000\000\000:\000>\000\158\000\166\000\000\000\000\001A\000\226\000\000\000\014\000J\000\000\003>\000\230\000\234\000\000\006\238\000\000\001A\000\000\000\000\000\000\000\000\000.\001E\000\000\003B\000\000\000\000\001E\000\000\000\000\000\000\000\000\000:\000>\003F\000\000\000\000\000\000\001E\000\014\000\000\000\000\000J\000\000\003>\000\000\006\170\000\000\000\000\001\006\001E\000\000\000\000\000.\0011\000\000\000\000\000\000\003B\0011\003J\000\182\000\000\000\000\000:\000>\000\000\001\n\003F\000\000\0011\000\014\000\000\000\000\000J\000\000\003>\000\000\006\238\000\000\000\000\000\000\0011\001\006\000\000\000.\0015\000\000\000\000\000\000\003B\0015\000\000\000\000\003J\000\182\000:\000>\000\000\000\000\003F\001\n\0015\000\014\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\0015\001\006\000\000\000.\001a\000\000\000\000\000\000\003B\001a\000\000\000\000\003J\000\182\000:\000>\000\000\000\000\003F\001\n\001a\000\014\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001a\001\006\000\000\000.\001i\000\000\000\000\000\000\003B\001i\000\000\000\000\003J\000\182\000:\000>\000\000\000\000\003F\001\n\001i\000\014\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001i\001\006\000\000\000.\001e\000\000\000\000\000\000\003B\001e\000\000\000\000\003J\000\182\000:\000>\000\000\000\000\003F\001\n\001e\000\014\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001e\001\006\000\000\000.\001m\000\000\000\000\000\000\003B\001m\000\000\000\000\003J\000\182\000:\000>\000\000\000\000\003F\001\n\001m\000\000\000\000\000\000\000J\000\000\003>\000\000\000\000\000\000\000\000\000\000\001m\001\006\000\000\000\000\000\000\000\000\000\000\000\000\003B\000\000\000\000\000\000\003J\000\182\000\000\000\000\000\000\000\000\003F\001\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003J\000\182\000\000\000\000\000\000\000\000\000\000\001\n"))
  
  and lhs =
    (8, "\000\142\142\142\141\141\141\140\140\139\139\138\138\137\137\136\136\136\136\135\135\135\134\134\133\133\132\131\131\130\130\129\128\128\127\127\127\127\127\127\127\127\127\127\127~~~~}}|||{zzyyxwwvuuutttssrrrrrqqqqppppoooonnnnnnnnmllkkjihgfeedccccbbbbba``_^^]]\\\\[[ZZYYXWWVUUTTSSSSRRQQQPPOONNMLLKJJIIHHGGFFFEEEEDCCCBBBBBAA@@??>>==<<;::999887766554433221100//..--,,++**))((''&&%%$$##\"\"!!!!!!!!!!!     \031\031\030\030\030\030\029\029\029\029\029\029\029\029\028\027\027\027\026\026\025\025\024\024\024\024\023\023\023\023\022\022\022\021\021\021\021\021\021\021\020\019\019\019\019\018\018\017\017\016\016\015\015\014\014\r\r\012\012\011\011\011\011\n\t\b\b\007\007\007\006\006\006\006\006\006\006\006\006\006\006\006\005\004\004\003\002\002\002\002\002\002\002\001\001\001\001\001\001")
  
  and goto =
    ((16, "\000\n\000\000\021\198\000\000\000\000\000\000\000\000\000\000\000K\003(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rb\000\000\000\000\000\000\002\160\000\000\000\000\000\000\000\000\007\152\000\000\bB\000\000\000\000\006F\b\236\000\000\017\178\006\128\000\000\000\000\017\252\000\000\006\246\000\000\000\167\000\000\000\000\0028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\142\000\000\000\000\000\000\bb\000\000\000\000\000\138\000\000\000\000\000\000\000\000\t\150\001\006\000\000\000\000\000\000\000\000\000\000\000\020\000\000\011\178\000\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018j\000N\000\000\000\000\004`\000\026\000\000\000\000\000\000\004\194\000\000\000\000\000\000\000s\000\000\000\000\003\248\000\026\000p\000\000\000\000\000\000\000\000\002,\000N\000s\000\000\r\172\000\000\n\028\000\000\0226\000\000\022\152\000\014\000\000\000\000\002z\000p\000\000\000,\000\014\000\000\000\000\000\000\000\000\018\180\000\000\000\000\001J\000\000\000\000\020<\000\000\000\000\000\000\000\000\000\000\000\000\019\"\000\000\014\026\000\000\000\000\000\000\000X\000\000\000\000\000\000\000d\001J\000\000\000\000\000\000\000\149\000F\000\000\001\028\001v\000\000\007J\000\000\001N\000\000\000\000\000\000\000\000\000\218\000\000\000\000\000\000\001\002\001J\000\000\000\000\000\000\000v\001\030\000\000\001$\001J\000\000\000\000\000\r\001F\000\000\000\000\000\000\001\142\003\\\000\000\001\134\001\\\000\000\001\000\n\166\000\000\000\000\000\000\000\000\000\000\000\000\001V\003(\000\000\000\000\000\000\000\000\001^\005\014\000\000\000\000\000\000\000\000\000\000\000\000\001v\004\024\000\000\004\156\000\000\004\232\000\000\000\000\006L\001\146\003(\001\176\005\014\002\b\000\000\000\000\022\250\000\000\000\000\002\252\000%\n\166\001F\000\000\000\000\001\148\n\250\000\000\000\000\000\000\000\000\000\000\001\216\001\\\000\000\000\029\n\166\000\000\000\000\000\000\000\000\000\000\001\252\011\132\000\000\000\000\000V\000\000\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\132\002,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005B\000\000\000\000\020$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\162\002\184\000\000\001\232\001J\000\000\000\000\002\176\002\020\020\154\000\000\002\234\001\\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\000\001\022\000\000\002\198\000\000\002\030\005\158\000\000\000\000\021\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000t\0005\000\000\0028\021.\000\000\000\000\001V\000\000\000\000\000\000\000\000\000\000\t\228\000\000\000\000\000\000\000\000\022\234\000\000\019l\000\000\000\000\019\218\000\000\000\000\000\000\000\000\b\184\000\000\000\000\000\000\000\146\014\210\004\016\002\152\001\196\015\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\160\000\000\000\000\000\000\000\000\000\000\000\000\005\222\000\000\000\000\000\000\000\000\000\000\000\000\002\168\003(\002\176\005\014\000\000\000\000\000\000\002\204\003(\002\212\003(\002\230\005\014\002\246\005\014\000\000\000\000\007,\002\246\td\002\250\003(\003\014\005\014\003\018\003(\003\020\003(\003\026\005\014\003 \005\014\0020\000\000\001\192\000\003\012.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\166\000\000\000\000\000\000\001\208\000\000\000\000\021p\000\000\002rb\005\014\000\000\007D\003b\003(\003n\005\014\000\000\012\170\012\244\000\000\005\156\000\000\000\000\000\000\000\000\000\000\000\003\000\000\003\216\000\000\000\000\000\000\000\000\000\000\000\000\000/\000\000\000\000\000\000\000\144\000\000\003\186\002b\000\000\016\250\000\000\000\000\000\000\000\000\000\000\006>\000\000\006\224\000\000\000\000\000\000\017D\000\000\000\000\000\000\000\000\003Z\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\001\194\000\000\000\000\003\198\022\134\003|\003(\003\142\005\014\007j\003\150\003(\003\156\005\014\000\000\n\130\000\000\000\000\r\174\000\000\003\234\000\000\0006\000\000"), (16, "\000E\000N\002S\0021\0026\002\030\000\226\000\179\001+\0012\000\247\000\163\000\164\0005\001\006\000\002\0005\000G\000\227\002 \002T\002:\001i\000E\000F\000[\001\251\001\252\002!\000\n\000l\000I\000J\001\024\000\226\000Z\0013\001\007\0005\0027\000G\000\200\001V\001\018\001.\002\002\000\227\0005\000[\002<\002E\000\165\001\018\000l\000I\000J\000\232\000_\000\200\000t\000v\0005\000\187\000\200\000^\000\189\002\004\000\003\002\005\002\006\000c\000\163\000\164\000\134\001p\001\011\000d\000@\000\166\002\007\000_\002?\000j\000\229\002D\001\n\000q\002\n\001\201\000\133\000L\000|\001\011\0006\0007\000\184\001T\001\011\000\127\000d\001\t\001\016\001\n\0011\001\t\0024\001\016\001\n\0025\0020\000A\000\229\0029\000\160\000\131\0016\002U\000@\000\137\002\011\000f\001i\001\135\002V\000\156\000\231\000\180\000\141\002\012\000E\000N\002\028\000E\000F\002\030\000\226\000\200\000\132\001g\000s\000\163\000\164\0005\000f\001\148\002>\000G\000\227\002 \000G\000\178\000@\001\019\002s\000[\000\184\000\205\002!\000\168\000l\000I\000J\000s\000I\000J\002&\000E\000F\001\017\001\018\001\011\000\161\000\162\001\142\0005\001\144\002?\000\163\000\164\002D\001\n\000\179\001W\000G\000\188\000\173\000_\000\183\000t\000v\000\177\000[\000\182\000\181\000\226\000\186\000l\000I\000J\000\163\000\164\002G\000\134\000@\000\191\000d\000\227\000\192\000d\000\190\000@\000\193\000\229\001\019\001\018\002'\000\233\002.\000\133\001d\000|\000\250\000\196\000_\000\184\000t\000v\000\199\0015\001\230\001\238\001\246\001\233\000E\000N\0005\000\202\000\213\0020\000\134\000\219\0029\000d\000\252\000@\002F\001)\000\137\002J\000f\000G\001n\000\158\002R\000\231\000\133\000\141\000|\000[\001\251\001\252\000\184\000@\000l\000I\000J\000\132\000\236\000s\002^\002L\000\229\000\203\001\004\001i\001\139\001\197\001\003\002\002\000E\000F\000\238\001\n\000\184\000\140\000\179\000f\0005\000\240\000\200\000_\000\185\000t\000v\001@\001\r\000G\002<\002E\002\004\000\180\002\005\002\006\000\132\000r\000s\000\134\001;\001\195\000d\000I\000J\002\007\000\231\000E\000N\0005\001\024\000E\000F\002\n\001\201\000\133\001\011\000|\000\250\001\142\001a\001\144\002`\000@\000G\002D\001\n\001\250\000G\000_\000E\001\159\000[\001\251\001\252\0005\000[\000l\000I\000J\002W\000\128\000I\000J\000\137\002\011\000f\000G\000d\000@\001\242\0005\002\002\000\141\002\012\0005\001\029\0006\0007\001P\001U\000I\000J\000\132\000_\000s\000t\000v\000_\000\203\001\030\001\232\001\233\002\004\000@\002\005\002\006\001\t\001o\001\n\000\134\001\145\0019\000d\000\250\001\149\002\007\000d\000E\000N\0005\001D\000f\002X\002\n\001\201\000\133\000\180\000|\001\163\001\162\001A\001\165\001\164\000\214\000G\000d\001C\002\001\000\163\000\164\000s\001\207\000[\001\251\001\252\000\215\001\170\000l\000I\000J\001\172\000\250\002A\001\018\000\137\002\011\000f\001Y\001\174\001\026\000f\001\228\002\002\000\141\002\012\001\015\001\176\001\181\001\027\001\183\001Z\001\\\001]\000\132\000_\000s\000t\000v\001\185\000s\001c\001\187\001\189\002\004\001\191\002\005\002\006\001\193\001\223\001\222\000\134\001\221\001\225\000d\001\247\001\243\002\007\001\234\000E\000N\0005\001\245\001\011\001\031\002\n\001\201\000\133\001E\000|\001 \000\216\001\016\001\n\001!\002\022\000G\000\200\002\029\002\t\0023\002\031\002#\000\184\000[\001\251\001\252\002%\002@\000l\000I\000J\000E\000F\002a\002c\000\137\002\011\000f\001\230\001\240\001\246\001\233\002e\002\002\000\141\002\012\001\"\002h\000G\002j\001\011\002r\000\217\000\226\000\132\000_\000s\000t\000v\001\016\001\n\001\020\000I\000J\002\004\000\227\002\005\002\006\000\000\000\000\000\000\000\134\000\000\000\000\000d\000\228\000\000\002\007\000\200\000E\000N\0005\000\000\000E\000F\002\n\001\201\000\133\000k\000|\001i\001\135\000\000\000\000\000\000\000\000\000G\000\000\000\000\002\017\000G\000\000\000\000\000\000\000[\001\251\001\252\000d\000\000\000l\000I\000J\001\011\001\137\000I\000J\000\137\002\011\000f\000\226\0024\001\016\001\n\0025\002\002\000\141\002\012\000\000\000\000\000\000\000\229\000\227\000E\000F\000\000\000\132\000_\000s\000t\000v\000_\000\230\001\142\000\000\001\144\002\004\000\000\002\005\002\006\000G\000\000\000f\000\134\000\000\000\000\000d\000\000\000\226\002\007\000d\000E\000N\0005\000I\000J\000\000\002\n\001\201\000\133\000\227\000|\000\000\000\231\000\000\000\000\000\220\000\221\000G\000\000\000\232\002\023\000\163\000\164\000\000\000\000\000[\001\251\001\252\000\222\000\000\000l\000I\000J\000\000\000\000\000\000\000\229\000\137\002\011\000f\000\000\000\000\000\000\000f\000\000\002\002\000\141\002\012\000d\000\000\001-\000\000\000\000\000\000\000\000\000\000\000\132\000_\000s\000t\000v\000\000\000g\000\000\000\000\000\000\002\004\000\000\002\005\002\006\000\000\000\000\000\000\000\134\000\229\000\000\000d\000\000\000\231\002\007\000\000\000E\000N\0005\0005\001.\000\000\002\n\001\201\000\133\000\000\000|\000e\000\223\000\000\000\000\000\000\000\000\000G\000\200\000\000\002+\000\000\000\000\000\000\000\184\000[\001\251\001\252\000\000\000\000\000l\000I\000J\000E\000F\000\231\000\000\000\137\002\011\000f\000\000\000\000\000\224\000\000\000\000\002\002\000\141\002\012\000\000\000\000\000G\000\000\001\011\000\000\000\225\000\000\000\132\000_\000s\000t\000v\001\016\001\n\0011\000I\000J\002\004\000\000\002\005\002\006\000\000\000\000\000\000\000\134\000\000\000\000\000d\000\000\000\000\002\007\001Y\000E\000N\0005\000\000\000E\001\153\002\n\001\201\000\133\000\235\000|\000\000\000\237\001\\\001]\000\000\000\000\000G\000\163\000\164\002I\000G\001`\000\000\000\000\000[\001\251\001\252\000d\000\000\000l\000I\000J\000E\001v\000I\000J\000\137\002\011\000f\000\000\000\000\000\000\000\000\000\000\002\002\000\141\002\012\000\000\000\000\000G\000\000\0018\000\000\000\000\001:\000\132\000_\000s\000t\000v\000\163\000\164\000\000\000I\000J\002\004\000\000\002\005\002\006\000\000\000\000\001\156\000\134\000\000\000\000\000d\000\000\000\000\002\007\000d\000E\000N\0005\000\000\000\000\000\000\002\n\001\201\000\133\000\000\000|\000\000\000\000\000?\000\000\000\000\000\159\000G\0017\001e\002K\000\184\000\163\000\164\000\000\000[\001\251\001\252\000d\000\000\000l\000I\000J\001>\000\000\000\000\000\000\000\137\002\011\000f\001\186\000\000\000\000\001\190\000\000\002\002\000\141\002\012\000\000\000\163\000\164\0015\002\"\000E\000F\002$\000\132\000_\000s\000t\000v\000\163\000\164\000\000\000\184\000\000\002\004\000\000\002\005\002\006\000G\002g\000\000\000\134\002i\000\000\000d\000\000\000[\002\007\000\163\000\164\000\000\000l\000I\000J\000\000\002\n\001\201\000\133\000\000\000|\000E\000N\000?\000\000\000\000\000\159\000\000\0017\001\157\000\000\000\000\000\163\000\164\000\000\000\184\000\000\000\000\000G\000_\000\000\000t\000v\001>\000\000\000\000\000[\000\137\002\011\000f\000\000\000l\000I\000J\000\000\000\134\000\141\002\012\000d\000\000\000\000\0015\000\184\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\133\000\000\000|\000\184\000\000\000\000\000\000\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\000\134\000\000\000\000\000d\000\000\000\000\000\171\000\000\000f\000\000\000\000\000\000\000E\000N\000?\001\151\000\133\000\159\000|\0017\001\154\000\000\000\184\000\163\000\164\000\132\000\000\000s\000\000\000G\000?\0021\0026\000\159\001>\0017\001H\000[\000\000\000\163\000\164\000\000\000l\000I\000J\000\137\000\000\000f\000\000\000\000\001>\000\000\0015\000\000\000\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\002[\0015\000_\000\000\000t\000v\000?\000\000\000\000\000\159\000\000\0017\001|\000\000\000\000\000\163\000\164\000\000\000\134\000\000\000\000\000d\000\000\000\000\000\200\000\000\001>\000\000\000\000\000\000\000E\000N\000?\001\151\000\133\000\159\000|\0017\001\132\000\000\000\184\000\163\000\164\000\000\0015\000\000\000\000\000G\000\000\000\000\000\000\000\000\001>\000\000\000\000\000[\000\184\000\000\001\011\000\000\000l\000I\000J\000\137\000\000\000f\0024\001\016\001\n\0025\0015\000\000\000\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\131\000\132\000\000\000s\000\000\000\000\000_\000\000\000t\000v\000\000\001\182\000\000\000\000\001\184\000\214\000\000\000\000\000\184\000\000\000\163\000\164\000\134\000\000\000\000\000d\000\000\000\215\000\000\000\000\000E\000N\001J\000\000\000E\000N\000?\001\151\000\133\000\159\000|\0017\001<\000\000\000\184\000\163\000\164\000G\000\000\000\000\000\000\000G\000\000\000\000\000\000\000[\001>\000\000\000\000\000[\000l\000I\000J\000\000\000l\000I\000J\000\137\000\000\000f\000\000\000\000\000\000\000\000\0015\000?\000\141\000\000\000\159\000\000\0017\001t\001N\000\000\000\163\000\164\000\132\000_\000s\000t\000v\000_\000\216\000t\000v\001>\000\000\000\000\000\000\000\000\000\000\000E\000F\000\134\000\184\000\000\000d\000\134\000\000\000\000\000d\000\000\000\000\0015\000\000\000\000\000\000\000\000\000G\000\133\000\000\000|\000\000\000\133\000\000\000|\000[\000\000\000\000\000\184\000\000\000l\000I\000J\000\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\000\000\000f\000\000\000\137\000\000\000f\000\000\000\000\000\147\000_\000\000\000\000\000\147\000\000\000\000\000\000\000\000\000\148\000\132\000\184\000s\001F\000\132\000\212\000s\000x\000\218\000\226\000d\000\000\000\000\000\000\000\163\000\164\000\000\000\000\000\000\000\000\000\000\000\227\000\000\000\133\000\000\000|\000\000\000\000\002m\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\239\000\241\000\249\000\000\000\000\000\000\000\000\000\000\000\000\000E\000N\001#\000\200\000\250\000\000\000\179\000\000\000\000\000f\000\000\002<\002E\000\000\000\000\000\000\000\000\000G\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000[\000\132\000\000\000s\000\000\000l\000I\000J\001%\000\000\000\000\000\000\001\011\000\254\000\000\000\000\000\229\000\000\002?\000\000\000\000\002D\001\n\000\000\000\000\000\000\000\000\000\000\000\184\000\000\001\011\001\015\000_\000\000\000t\000v\000\000\000\000\000\000\001\016\001\n\001\020\000\000\000\245\000E\000N\000\000\000\000\000\134\000\000\000\179\000d\000\000\000\000\000\000\000\000\000\000\000\000\000\231\000\000\000\000\000G\000\000\000\000\000\133\000\000\000|\000E\000N\000[\000\000\000\000\000\000\001\022\000l\000I\000J\000\000\000\000\000\000\000\000\000\000\001\014\000\000\000G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\180\000_\000\255\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\134\000\000\000\145\000d\000\000\000\000\000\000\000_\000\000\000t\000v\000\000\000E\000N\000\000\000\000\000\133\000\000\000|\000\000\000\000\000\000\000\000\000\134\000\000\000\000\000d\000\000\000\000\000G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000[\000\000\000\133\000\000\000|\000l\000I\000J\000\137\000\000\000f\000\000\000\000\000\000\000\000\000\180\000\000\000\255\000\000\000\000\001\199\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\137\000_\000f\000t\000v\000\000\000E\000N\000\000\000\147\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000\148\000\132\000d\000s\000\000\000G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000[\001\201\000\133\000\000\000|\000l\000I\000J\000\000\000\000\000\000\002(\000E\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\137\000_\000f\000t\000v\000\000\000[\000\000\000\000\000\141\000\000\000l\000I\000J\000\000\000\000\000\000\000\134\002*\000\132\000d\000s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002.\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\002,\000\133\000\141\000|\000E\000N\000\000\002b\000\000\000\000\002d\000\226\000\132\000\000\000s\000\000\000\163\000\164\000\000\000\000\000\000\000G\000\000\000\227\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\002f\000l\000I\000J\000\000\000\000\000\141\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002p\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\000\229\000l\000I\000J\000\135\000\133\000\147\000|\000E\000N\000\000\000\000\000\184\000\000\000\000\001\160\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\000\000_\002l\000t\000v\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\231\000\141\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\152\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\133\000\141\000|\000E\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\000\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\000\000\147\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\001L\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\001\147\000l\000I\000J\000\000\000\133\001\141\000|\000E\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\000\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\001\140\000l\000I\000J\000\000\000\000\001\141\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\001\236\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\001\255\000\133\000\141\000|\000E\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\000\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\000\000\141\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\002\015\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\002\020\000\133\000\141\000|\000E\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\000\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\000\000\141\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\002C\000l\000I\000J\002O\000\133\001\141\000|\000E\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\000\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\000\000\141\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\133\001w\000|\000E\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\000\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\000\001r\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\133\000\144\000|\000E\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000\000\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\000\000\138\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\133\000\000\000|\000E\000N\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\134\000\000\000\000\000d\000\000\000\000\000\000\000[\000\137\000\000\000f\000\000\000l\000I\000J\000\000\000\133\000\150\000|\000E\000F\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000s\000\000\000E\000F\000\000\000\000\000\000\000G\000\000\000\000\000_\000\000\000t\000v\000\000\000[\000\137\000\000\000f\000G\000l\000I\000J\000\000\000\000\001{\000\134\000[\000\000\000d\000\000\000\000\000l\000I\000J\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\133\000\000\000|\000\000\000\000\000_\000\000\000t\000v\000\212\000\000\000\000\000\218\000\226\000\000\000\000\000\000\000_\000\163\000\164\000\143\000\134\000\000\000\000\000d\000\227\000\000\000\000\000\000\000\137\000\000\000f\000\000\000\134\000\000\000\234\000d\000\133\001~\000|\000\239\000\241\000\249\000\000\000\000\000\000\000\000\000\000\000\132\000\133\000s\000|\000\000\000\250\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\000F\000\000\000\000\000\000\0010\000\000\000f\000\000\001A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\000f\000E\000F\000\000\000\000\000\132\000[\000s\000\000\000\000\000\229\000l\000I\000J\000\000\000\000\000\000\000\132\000G\000s\000\000\000\000\000\184\000\000\000\000\001\015\000[\000\000\000\000\000\000\000\000\000l\000I\000J\000E\000F\000\000\000\245\000_\000\000\000t\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\231\000\000\000\134\000\000\000\000\000d\000_\000[\000t\000v\000\000\000\000\000l\000I\000J\001\022\000\000\000\000\000\133\000\000\000|\000\000\000\134\000\000\000\000\000d\000\000\001\169\000\000\000\000\001\173\000\226\000\000\000\000\000\000\001\177\000\163\000\164\000\133\000_\000|\000t\000v\000\227\001\178\000\000\000\000\001_\000\000\000f\000\000\000\000\000\000\001\179\000\000\000\134\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\001k\000s\000f\000\000\000\133\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\000F\000\000\000\000\000\000\000\132\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\001\214\000\000\000f\000\000\000\000\000\000\000[\000\000\000\229\001\194\002Y\000l\000I\000J\000\000\000\000\000\000\000\000\000\000\000\132\000\184\000s\000\000\002b\000\000\000\000\002d\000\226\000\000\000\000\000E\000F\000\163\000\164\002Z\000\000\002]\000\000\000_\000\227\002t\000\000\000\000\000\000\000\000\000\000\000\000\000G\000\000\002f\000\231\000\000\000\000\000\000\000\000\000[\000\000\000d\000\000\000\000\000l\000I\000J\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\000\000\000|\000?\000\000\000\000\000\159\000\000\0017\001|\000\000\000\212\000\163\000\164\000\218\000\226\000\000\000_\002k\000\000\000\163\000\164\000\000\001>\000\000\000\000\000\000\000\227\000\000\000\000\000\000\000f\000\000\000\000\000\229\000\000\000d\000\234\000\000\000\000\000\000\0015\000\000\000\000\000\244\000\000\000\184\000\000\000\132\000\000\000s\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002l\000\000\002o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002q\002s\000\000\001\127\001\128\000f\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\000\000\000\000\000\000\184\000\129\000\000\000s\000\000\000\000\000\000\000\000\000\184\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\231"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 982 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _2 = 
# 722 "cparser/pre_parser.mly"
    ()
# 993 "cparser/pre_parser.ml"
             in
            
# 726 "cparser/pre_parser.mly"
    ()
# 998 "cparser/pre_parser.ml"
            
          in
          (
# 762 "cparser/pre_parser.mly"
    ()
# 1004 "cparser/pre_parser.ml"
           : 'tv_abstract_declarator_parameter_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 1031 "cparser/pre_parser.ml"
           in
          (
# 762 "cparser/pre_parser.mly"
    ()
# 1036 "cparser/pre_parser.ml"
           : 'tv_abstract_declarator_parameter_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _2_inlined1 : 'tv_option_type_qualifier_list_ = Obj.magic _2_inlined1 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1078 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let x =
              let _2 = 
# 722 "cparser/pre_parser.mly"
    ()
# 1090 "cparser/pre_parser.ml"
               in
              
# 726 "cparser/pre_parser.mly"
    ()
# 1095 "cparser/pre_parser.ml"
              
            in
            
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 1101 "cparser/pre_parser.ml"
            
          in
          (
# 762 "cparser/pre_parser.mly"
    ()
# 1107 "cparser/pre_parser.ml"
           : 'tv_abstract_declarator_parameter_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1142 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _2 = 
# 722 "cparser/pre_parser.mly"
    ()
# 1153 "cparser/pre_parser.ml"
             in
            
# 726 "cparser/pre_parser.mly"
    ()
# 1158 "cparser/pre_parser.ml"
            
          in
          (
# 762 "cparser/pre_parser.mly"
    ()
# 1164 "cparser/pre_parser.ml"
           : 'tv_abstract_declarator_type_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 1191 "cparser/pre_parser.ml"
           in
          (
# 762 "cparser/pre_parser.mly"
    ()
# 1196 "cparser/pre_parser.ml"
           : 'tv_abstract_declarator_type_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _2_inlined1 : 'tv_option_type_qualifier_list_ = Obj.magic _2_inlined1 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1238 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let x =
              let _2 = 
# 722 "cparser/pre_parser.mly"
    ()
# 1250 "cparser/pre_parser.ml"
               in
              
# 726 "cparser/pre_parser.mly"
    ()
# 1255 "cparser/pre_parser.ml"
              
            in
            
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 1261 "cparser/pre_parser.ml"
            
          in
          (
# 762 "cparser/pre_parser.mly"
    ()
# 1267 "cparser/pre_parser.ml"
           : 'tv_abstract_declarator_type_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_multiplicative_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_expression = 
# 325 "cparser/pre_parser.mly"
    ()
# 1293 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_multiplicative_expression = Obj.magic _3 in
        let _2 : 'tv_additive_operator = Obj.magic _2 in
        let _1 : 'tv_additive_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_additive_expression = 
# 325 "cparser/pre_parser.mly"
    ()
# 1332 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1353 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_operator = 
# 320 "cparser/pre_parser.mly"
               ()
# 1361 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1382 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_operator = 
# 320 "cparser/pre_parser.mly"
               ()
# 1390 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_equality_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_and_expression = 
# 354 "cparser/pre_parser.mly"
    ()
# 1415 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_equality_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1449 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_and_expression = 
# 354 "cparser/pre_parser.mly"
    ()
# 1458 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_argument_expression_list = 
# 285 "cparser/pre_parser.mly"
    ()
# 1483 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1517 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_argument_expression_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_argument_expression_list = 
# 285 "cparser/pre_parser.mly"
    ()
# 1526 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_arguments = 
# 874 "cparser/pre_parser.mly"
    ()
# 1544 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1572 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_arguments = 
# 874 "cparser/pre_parser.mly"
    ()
# 1580 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_asm_operands = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1620 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1626 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_asm_arguments = 
# 874 "cparser/pre_parser.mly"
    ()
# 1634 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_asm_flags = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1686 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_asm_operands = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1692 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1698 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_asm_arguments = 
# 874 "cparser/pre_parser.mly"
    ()
# 1706 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_attributes = 
# 867 "cparser/pre_parser.mly"
    ()
# 1724 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1752 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_attributes = 
# 867 "cparser/pre_parser.mly"
    ()
# 1760 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1788 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_attributes = 
# 867 "cparser/pre_parser.mly"
    ()
# 1796 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_flags = 
# 898 "cparser/pre_parser.mly"
    ()
# 1821 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_string_literals_list = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1855 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_asm_flags = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_asm_flags = 
# 898 "cparser/pre_parser.mly"
    ()
# 1864 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_op_name = 
# 893 "cparser/pre_parser.mly"
    ()
# 1882 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1915 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1921 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 1930 "cparser/pre_parser.ml"
           in
          (
# 893 "cparser/pre_parser.mly"
    ()
# 1935 "cparser/pre_parser.ml"
           : 'tv_asm_op_name)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1981 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1987 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_string_literals_list = Obj.magic _2 in
        let _1 : 'tv_asm_op_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_asm_operand = 
# 888 "cparser/pre_parser.mly"
    ()
# 1997 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_operands = 
# 879 "cparser/pre_parser.mly"
    ()
# 2015 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_operands_ne = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_operands = 
# 879 "cparser/pre_parser.mly"
    ()
# 2040 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_asm_operand = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2074 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_asm_operands_ne = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_asm_operands_ne = 
# 884 "cparser/pre_parser.mly"
    ()
# 2083 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_operand = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_operands_ne = 
# 884 "cparser/pre_parser.mly"
    ()
# 2108 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2165 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2170 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_asm_arguments = Obj.magic _5 in
        let _4 : 'tv_string_literals_list = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2177 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2183 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_asm_statement = 
# 836 "cparser/pre_parser.mly"
    ()
# 2191 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_expression = 
# 384 "cparser/pre_parser.mly"
    ()
# 2216 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : 'tv_assignment_operator = Obj.magic _2 in
        let _1 : 'tv_unary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assignment_expression = 
# 384 "cparser/pre_parser.mly"
    ()
# 2255 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2276 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2284 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2305 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2313 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2334 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2342 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2363 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2371 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2392 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2400 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2421 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2429 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2450 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2458 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2479 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2487 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2508 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2516 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2537 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2545 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2566 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 398 "cparser/pre_parser.mly"
    ()
# 2574 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2625 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2630 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_gcc_attribute_list = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2636 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2641 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2646 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_attribute_specifier = 
# 604 "cparser/pre_parser.mly"
    ()
# 2654 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2693 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_argument_expression_list = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2699 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2704 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 604 "cparser/pre_parser.mly"
    ()
# 2712 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2751 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_argument_expression_list = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2757 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2762 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 604 "cparser/pre_parser.mly"
    ()
# 2770 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2809 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2815 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2820 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 604 "cparser/pre_parser.mly"
    ()
# 2828 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_attribute_specifier_list = 
# 597 "cparser/pre_parser.mly"
    ()
# 2846 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_attribute_specifier_list = 
# 597 "cparser/pre_parser.mly"
    ()
# 2878 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_block_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 821 "cparser/pre_parser.mly"
    ()
# 2903 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 821 "cparser/pre_parser.mly"
    ()
# 2928 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 51 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 2949 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 821 "cparser/pre_parser.mly"
    ()
# 2957 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_block_item = Obj.magic _2 in
        let _1 : 'tv_option_block_item_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_block_item_list = 
# 815 "cparser/pre_parser.mly"
    ()
# 2989 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_c_initializer = 
# 773 "cparser/pre_parser.mly"
    ()
# 3014 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3053 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_COMMA_ = Obj.magic _3 in
        let _2 : 'tv_initializer_list = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3060 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_c_initializer = 
# 773 "cparser/pre_parser.mly"
    ()
# 3068 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_unary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expression = 
# 309 "cparser/pre_parser.mly"
    ()
# 3093 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_cast_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3133 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_type_name = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3139 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_cast_expression = 
# 309 "cparser/pre_parser.mly"
    ()
# 3147 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ctx;
                MenhirLib.EngineTypes.startp = _startpos_ctx_;
                MenhirLib.EngineTypes.endp = _endpos_ctx_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3186 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_block_item_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3192 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_compound_statement = 
# 811 "cparser/pre_parser.mly"
    ( ctx() )
# 3201 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression = 
# 379 "cparser/pre_parser.mly"
    ()
# 3226 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_conditional_expression = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3272 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3278 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_conditional_expression = 
# 379 "cparser/pre_parser.mly"
    ()
# 3287 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctx2;
          MenhirLib.EngineTypes.startp = _startpos_ctx2_;
          MenhirLib.EngineTypes.endp = _endpos_ctx2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx1;
              MenhirLib.EngineTypes.startp = _startpos_ctx1_;
              MenhirLib.EngineTypes.endp = _endpos_ctx1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ctx2 : 'tv_save_context = Obj.magic ctx2 in
        let _2 : 'tv_parameter_type_list = Obj.magic _2 in
        let ctx1 : 'tv_save_context = Obj.magic ctx1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx1_ in
        let _endpos = _endpos_ctx2_ in
        let _v : 'tv_context_parameter_type_list = 
# 734 "cparser/pre_parser.mly"
    ( ctx1 (); ctx2 )
# 3326 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3359 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_block_item__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_block_item_ = 
# 424 "cparser/pre_parser.mly"
    ()
# 3369 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3402 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_typedef_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_block_item_ = 
# 424 "cparser/pre_parser.mly"
    ()
# 3412 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_block_item_ = 
# 424 "cparser/pre_parser.mly"
    ()
# 3437 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3470 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 424 "cparser/pre_parser.mly"
    ()
# 3480 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3513 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_typedef_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 424 "cparser/pre_parser.mly"
    ()
# 3523 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 424 "cparser/pre_parser.mly"
    ()
# 3548 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_kr_param_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_list = 
# 928 "cparser/pre_parser.mly"
    ()
# 3573 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_kr_param_declaration = Obj.magic _2 in
        let _1 : 'tv_declaration_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_declaration_list = 
# 928 "cparser/pre_parser.mly"
    ()
# 3605 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 470 "cparser/pre_parser.mly"
    ()
# 3630 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 592 "cparser/pre_parser.mly"
    ()
# 3656 "cparser/pre_parser.ml"
           in
          (
# 470 "cparser/pre_parser.mly"
    ()
# 3661 "cparser/pre_parser.ml"
           : 'tv_declaration_specifier_no_typedef_name)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 592 "cparser/pre_parser.mly"
    ()
# 3688 "cparser/pre_parser.ml"
           in
          (
# 470 "cparser/pre_parser.mly"
    ()
# 3693 "cparser/pre_parser.ml"
           : 'tv_declaration_specifier_no_typedef_name)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 470 "cparser/pre_parser.mly"
    ()
# 3719 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_specifier_no_typedef_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 470 "cparser/pre_parser.mly"
    ()
# 3744 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 3777 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 3782 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_declaration_block_item__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 3823 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 3828 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_declaration_block_item__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 3862 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 3867 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_declaration_block_item__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 3908 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 3913 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_declaration_block_item__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 3947 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 3952 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_declaration_external_declaration__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 3993 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 3998 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_declaration_external_declaration__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4032 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 4037 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_declaration_external_declaration__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4078 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 4083 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_declaration_external_declaration__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4117 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 4122 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_parameter_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4163 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 4168 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_parameter_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4202 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 4207 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_parameter_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4248 "cparser/pre_parser.ml"
           in
          (
# 493 "cparser/pre_parser.mly"
    ()
# 4253 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_parameter_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : 'tv_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4296 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4305 "cparser/pre_parser.ml"
           in
          (
# 503 "cparser/pre_parser.mly"
    ()
# 4310 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_typedef)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : 'tv_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4359 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4369 "cparser/pre_parser.ml"
           in
          (
# 503 "cparser/pre_parser.mly"
    ()
# 4374 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_typedef)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4415 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4426 "cparser/pre_parser.ml"
           in
          (
# 503 "cparser/pre_parser.mly"
    ()
# 4431 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_typedef)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4478 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4490 "cparser/pre_parser.ml"
           in
          (
# 503 "cparser/pre_parser.mly"
    ()
# 4495 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_typedef)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : 'tv_type_specifier_no_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4538 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4547 "cparser/pre_parser.ml"
           in
          (
# 503 "cparser/pre_parser.mly"
    ()
# 4552 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_typedef)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : 'tv_type_specifier_no_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4601 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4611 "cparser/pre_parser.ml"
           in
          (
# 503 "cparser/pre_parser.mly"
    ()
# 4616 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_typedef)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4657 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 4668 "cparser/pre_parser.ml"
           in
          (
# 503 "cparser/pre_parser.mly"
    ()
# 4673 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_typedef)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4720 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 4732 "cparser/pre_parser.ml"
           in
          (
# 503 "cparser/pre_parser.mly"
    ()
# 4737 "cparser/pre_parser.ml"
           : 'tv_declaration_specifiers_typedef)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let x : 'tv_declarator_noattrend = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_declarator = 
# 678 "cparser/pre_parser.mly"
    ( x )
# 4770 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 4803 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _2 : 'tv_low_prec = Obj.magic _2 in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 4809 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declarator_identifier = 
# 670 "cparser/pre_parser.mly"
    ( i )
# 4817 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 4844 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 4849 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let i = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 4858 "cparser/pre_parser.ml"
           in
          (
# 670 "cparser/pre_parser.mly"
    ( i )
# 4863 "cparser/pre_parser.ml"
           : 'tv_declarator_identifier)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_declarator_noattrend = 
# 682 "cparser/pre_parser.mly"
    ( x )
# 4889 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4930 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _1 =
            let _2 = 
# 722 "cparser/pre_parser.mly"
    ()
# 4941 "cparser/pre_parser.ml"
             in
            
# 726 "cparser/pre_parser.mly"
    ()
# 4946 "cparser/pre_parser.ml"
            
          in
          (
# 684 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_other)
      | _ -> x )
# 4954 "cparser/pre_parser.ml"
           : 'tv_declarator_noattrend)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_typename_declarator_ = 
# 226 "cparser/pre_parser.mly"
         ( declare_typename (fst i); i )
# 4980 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_declarator_ = 
# 224 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 5005 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator_noattrend = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_declarator_noattrend_ = 
# 224 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 5030 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_enumerator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_enumerator_ = 
# 224 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 5055 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5082 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_designator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_designation = 
# 782 "cparser/pre_parser.mly"
    ()
# 5091 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5124 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5130 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 = 
# 407 "cparser/pre_parser.mly"
    ()
# 5139 "cparser/pre_parser.ml"
           in
          (
# 791 "cparser/pre_parser.mly"
    ()
# 5144 "cparser/pre_parser.ml"
           : 'tv_designator)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5173 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let _2 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 5182 "cparser/pre_parser.ml"
           in
          (
# 791 "cparser/pre_parser.mly"
    ()
# 5187 "cparser/pre_parser.ml"
           : 'tv_designator)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_designator = Obj.magic _2 in
        let _1 : 'tv_option_designator_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_designator_list = 
# 786 "cparser/pre_parser.mly"
    ()
# 5220 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5259 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_abstract_declarator_type_name_ = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5266 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = 
# 768 "cparser/pre_parser.mly"
    ()
# 5274 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_optional_assignment_expression_RBRACK_ = Obj.magic _4 in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5315 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_direct_abstract_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = 
# 768 "cparser/pre_parser.mly"
    ()
# 5324 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5357 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_context_parameter_type_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5363 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 5372 "cparser/pre_parser.ml"
           in
          (
# 768 "cparser/pre_parser.mly"
    ()
# 5377 "cparser/pre_parser.ml"
           : 'tv_direct_abstract_declarator)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5417 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_context_parameter_type_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5423 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_abstract_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 5433 "cparser/pre_parser.ml"
           in
          (
# 768 "cparser/pre_parser.mly"
    ()
# 5438 "cparser/pre_parser.ml"
           : 'tv_direct_abstract_declarator)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_direct_declarator = 
# 690 "cparser/pre_parser.mly"
    ( set_id_type i VarId; (i, Decl_ident) )
# 5464 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5503 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let x : 'tv_declarator = Obj.magic x in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5510 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 692 "cparser/pre_parser.mly"
    ( x )
# 5518 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_optional_assignment_expression_RBRACK_ = Obj.magic _4 in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5559 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 694 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_other)
      | _ -> x )
# 5570 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5609 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let ctx : 'tv_context_parameter_type_list = Obj.magic ctx in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5615 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 698 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_fun ctx)
      | _ -> x )
# 5626 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = il;
            MenhirLib.EngineTypes.startp = _startpos_il_;
            MenhirLib.EngineTypes.endp = _endpos_il_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5671 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let il : 'tv_option_identifier_list_ = Obj.magic il in
        let _3 : 'tv_save_context = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5678 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_direct_declarator = 
# 702 "cparser/pre_parser.mly"
    ( match snd x, il with
      | Decl_ident, Some il -> (fst x, Decl_krfun il)
      | Decl_ident, None -> (fst x, Decl_krfun [])
      | _ -> x )
# 5690 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5724 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_do_statement1 = 
# 850 "cparser/pre_parser.mly"
    ( ctx () )
# 5733 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5790 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_option_COMMA_ = Obj.magic _6 in
        let _5 : 'tv_enumerator_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5797 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_other_identifier_ = Obj.magic _3 in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5804 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_enum_specifier = 
# 567 "cparser/pre_parser.mly"
    ()
# 5812 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5847 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let _3 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 5856 "cparser/pre_parser.ml"
           in
          (
# 567 "cparser/pre_parser.mly"
    ()
# 5861 "cparser/pre_parser.ml"
           : 'tv_enum_specifier)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_enumeration_constant = 
# 581 "cparser/pre_parser.mly"
    ( set_id_type i VarId; i )
# 5887 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_enumeration_constant = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_enumerator = 
# 577 "cparser/pre_parser.mly"
    ( (i, ()) )
# 5912 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression = Obj.magic _1 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5946 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let i : 'tv_enumeration_constant = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _3 = 
# 407 "cparser/pre_parser.mly"
    ()
# 5956 "cparser/pre_parser.ml"
           in
          (
# 577 "cparser/pre_parser.mly"
    ( (i, ()) )
# 5961 "cparser/pre_parser.ml"
           : 'tv_enumerator)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declare_varname_enumerator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enumerator_list = 
# 572 "cparser/pre_parser.mly"
    ()
# 5987 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_declare_varname_enumerator_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6021 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_enumerator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_enumerator_list = 
# 572 "cparser/pre_parser.mly"
    ()
# 6030 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_relational_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_expression = 
# 349 "cparser/pre_parser.mly"
    ()
# 6055 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_relational_expression = Obj.magic _3 in
        let _2 : 'tv_equality_operator = Obj.magic _2 in
        let _1 : 'tv_equality_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_equality_expression = 
# 349 "cparser/pre_parser.mly"
    ()
# 6094 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6115 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_operator = 
# 344 "cparser/pre_parser.mly"
             ()
# 6123 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6144 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_operator = 
# 344 "cparser/pre_parser.mly"
             ()
# 6152 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exclusive_or_expression = 
# 359 "cparser/pre_parser.mly"
    ()
# 6177 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_and_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6211 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_exclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_exclusive_or_expression = 
# 359 "cparser/pre_parser.mly"
    ()
# 6220 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expression = 
# 403 "cparser/pre_parser.mly"
    ()
# 6245 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6279 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_expression = 
# 403 "cparser/pre_parser.mly"
    ()
# 6288 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6315 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_expression_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_expression_statement = 
# 825 "cparser/pre_parser.mly"
    ()
# 6324 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_optional_expression_SEMICOLON_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_for_statement_header = 
# 861 "cparser/pre_parser.mly"
    ()
# 6349 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_block_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_for_statement_header = 
# 861 "cparser/pre_parser.mly"
    ()
# 6374 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_compound_statement = Obj.magic _2 in
        let ctx : 'tv_function_definition1 = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_function_definition = 
# 946 "cparser/pre_parser.mly"
    ( ctx () )
# 6406 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctx;
          MenhirLib.EngineTypes.startp = _startpos_ctx_;
          MenhirLib.EngineTypes.endp = _endpos_ctx_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = func;
                MenhirLib.EngineTypes.startp = _startpos_func_;
                MenhirLib.EngineTypes.endp = _endpos_func_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _4 : 'tv_attribute_specifier_list = Obj.magic _4 in
        let _3 : 'tv_save_context = Obj.magic _3 in
        let func : 'tv_declare_varname_declarator_noattrend_ = Obj.magic func in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ctx_ in
        let _v : 'tv_function_definition1 = 
# 937 "cparser/pre_parser.mly"
    ( begin match snd func with
      | Decl_fun ctx -> ctx (); declare_varname (fst func)
      | Decl_krfun il -> List.iter declare_varname il
      | _ -> ()
      end;
      ctx )
# 6464 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = func;
              MenhirLib.EngineTypes.startp = _startpos_func_;
              MenhirLib.EngineTypes.endp = _endpos_func_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_declaration_list = Obj.magic _4 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let func : 'tv_declare_varname_declarator_noattrend_ = Obj.magic func in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_function_definition1 = 
# 937 "cparser/pre_parser.mly"
    ( begin match snd func with
      | Decl_fun ctx -> ctx (); declare_varname (fst func)
      | Decl_krfun il -> List.iter declare_varname il
      | _ -> ()
      end;
      ctx )
# 6515 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6536 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_function_specifier = 
# 635 "cparser/pre_parser.mly"
    ()
# 6544 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6565 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_function_specifier = 
# 635 "cparser/pre_parser.mly"
    ()
# 6573 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_gcc_attribute = 
# 615 "cparser/pre_parser.mly"
    ()
# 6591 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute = 
# 615 "cparser/pre_parser.mly"
    ()
# 6616 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6655 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_argument_expression_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6661 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_gcc_attribute = 
# 615 "cparser/pre_parser.mly"
    ()
# 6670 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6721 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_argument_expression_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6727 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let i : 'tv_typedef_name = Obj.magic i in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6733 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_gcc_attribute = 
# 620 "cparser/pre_parser.mly"
    ( set_id_type i VarId )
# 6742 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_gcc_attribute = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_list = 
# 609 "cparser/pre_parser.mly"
    ()
# 6767 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_gcc_attribute = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6801 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_gcc_attribute_list = 
# 609 "cparser/pre_parser.mly"
    ()
# 6810 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v =
          let _1 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 6836 "cparser/pre_parser.ml"
           in
          (
# 626 "cparser/pre_parser.mly"
    ()
# 6841 "cparser/pre_parser.ml"
           : 'tv_gcc_attribute_word)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6863 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_word = 
# 626 "cparser/pre_parser.mly"
    ()
# 6871 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6892 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_word = 
# 626 "cparser/pre_parser.mly"
    ()
# 6900 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_typedef_name = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_general_identifier = 
# 204 "cparser/pre_parser.mly"
    ( i )
# 6925 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 6952 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 6957 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let i = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 6966 "cparser/pre_parser.ml"
           in
          (
# 204 "cparser/pre_parser.mly"
    ( i )
# 6971 "cparser/pre_parser.ml"
           : 'tv_general_identifier)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_generic_association = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_generic_assoc_list = 
# 261 "cparser/pre_parser.mly"
    ()
# 6997 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_generic_association = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7031 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_generic_assoc_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_generic_assoc_list = 
# 261 "cparser/pre_parser.mly"
    ()
# 7040 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7074 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_type_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_generic_association = 
# 266 "cparser/pre_parser.mly"
    ()
# 7083 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7117 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7122 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_generic_association = 
# 266 "cparser/pre_parser.mly"
    ()
# 7130 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7181 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_generic_assoc_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7187 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7193 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7198 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_generic_selection = 
# 256 "cparser/pre_parser.mly"
    ()
# 7206 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 7233 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 7238 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let x = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 7247 "cparser/pre_parser.ml"
           in
          (
# 917 "cparser/pre_parser.mly"
    ( [x] )
# 7252 "cparser/pre_parser.ml"
           : 'tv_identifier_list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = l;
                MenhirLib.EngineTypes.startp = _startpos_l_;
                MenhirLib.EngineTypes.endp = _endpos_l_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 7292 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 7297 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7302 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let l : 'tv_identifier_list = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_i_ in
        let _v =
          let x = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 7312 "cparser/pre_parser.ml"
           in
          (
# 919 "cparser/pre_parser.mly"
    ( x::l )
# 7317 "cparser/pre_parser.ml"
           : 'tv_identifier_list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7375 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_statement = Obj.magic _6 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7382 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7388 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7393 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_ifelse_statement1 = 
# 840 "cparser/pre_parser.mly"
    ( ctx() )
# 7401 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_exclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_inclusive_or_expression = 
# 364 "cparser/pre_parser.mly"
    ()
# 7426 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_exclusive_or_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7460 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_inclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_inclusive_or_expression = 
# 364 "cparser/pre_parser.mly"
    ()
# 7469 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_attribute_specifier_list = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : 'tv_declare_varname_declarator_noattrend_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_init_declarator = 
# 434 "cparser/pre_parser.mly"
    ()
# 7508 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_c_initializer = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7554 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_attribute_specifier_list = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : 'tv_declare_varname_declarator_noattrend_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_init_declarator = 
# 434 "cparser/pre_parser.mly"
    ()
# 7565 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_init_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_init_declarator_list = 
# 429 "cparser/pre_parser.mly"
    ()
# 7590 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_init_declarator = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7624 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_init_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_init_declarator_list = 
# 429 "cparser/pre_parser.mly"
    ()
# 7633 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_c_initializer = Obj.magic _2 in
        let _1 : 'tv_option_designation_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_initializer_list = 
# 778 "cparser/pre_parser.mly"
    ()
# 7665 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_c_initializer = Obj.magic _4 in
        let _3 : 'tv_option_designation_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7706 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_initializer_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_initializer_list = 
# 778 "cparser/pre_parser.mly"
    ()
# 7715 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ctx;
                    MenhirLib.EngineTypes.startp = _startpos_ctx_;
                    MenhirLib.EngineTypes.endp = _endpos_ctx_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_statement = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7767 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7773 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7778 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_iteration_statement = 
# 856 "cparser/pre_parser.mly"
    ( ctx() )
# 7787 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7844 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7849 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_expression = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7855 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7860 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_do_statement1 = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_iteration_statement = 
# 856 "cparser/pre_parser.mly"
    ( ctx() )
# 7870 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : 'tv_statement = Obj.magic _7 in
        let _6 : 'tv_optional_expression_RPAREN_ = Obj.magic _6 in
        let _5 : 'tv_optional_expression_SEMICOLON_ = Obj.magic _5 in
        let _4 : 'tv_for_statement_header = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7931 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7936 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_iteration_statement = 
# 856 "cparser/pre_parser.mly"
    ( ctx() )
# 7945 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7978 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7984 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 7993 "cparser/pre_parser.ml"
           in
          (
# 832 "cparser/pre_parser.mly"
    ()
# 7998 "cparser/pre_parser.ml"
           : 'tv_jump_statement)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8026 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8031 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_jump_statement = 
# 832 "cparser/pre_parser.mly"
    ()
# 8039 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8066 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8071 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_jump_statement = 
# 832 "cparser/pre_parser.mly"
    ()
# 8079 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8112 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_expression_ = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8118 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_jump_statement = 
# 832 "cparser/pre_parser.mly"
    ()
# 8126 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8159 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_block_item__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_kr_param_declaration = 
# 923 "cparser/pre_parser.mly"
    ()
# 8169 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8203 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 8213 "cparser/pre_parser.ml"
           in
          (
# 807 "cparser/pre_parser.mly"
    ()
# 8218 "cparser/pre_parser.ml"
           : 'tv_labeled_statement)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_statement = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8259 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8265 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _2 = 
# 407 "cparser/pre_parser.mly"
    ()
# 8274 "cparser/pre_parser.ml"
           in
          (
# 807 "cparser/pre_parser.mly"
    ()
# 8279 "cparser/pre_parser.ml"
           : 'tv_labeled_statement)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8314 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8319 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_labeled_statement = 
# 807 "cparser/pre_parser.mly"
    ()
# 8327 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8346 "cparser/pre_parser.ml"
           in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8351 "cparser/pre_parser.ml"
           : 'tv_list_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _2 = 
# 459 "cparser/pre_parser.mly"
    ()
# 8386 "cparser/pre_parser.ml"
             in
            
# 172 "cparser/pre_parser.mly"
              ()
# 8391 "cparser/pre_parser.ml"
            
          in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8397 "cparser/pre_parser.ml"
           : 'tv_list_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_type_qualifier_noattr = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _2 = 
# 459 "cparser/pre_parser.mly"
    ()
# 8432 "cparser/pre_parser.ml"
             in
            
# 172 "cparser/pre_parser.mly"
              ()
# 8437 "cparser/pre_parser.ml"
            
          in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8443 "cparser/pre_parser.ml"
           : 'tv_list_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_function_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _2 = 
# 459 "cparser/pre_parser.mly"
    ()
# 8478 "cparser/pre_parser.ml"
             in
            
# 172 "cparser/pre_parser.mly"
              ()
# 8483 "cparser/pre_parser.ml"
            
          in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8489 "cparser/pre_parser.ml"
           : 'tv_list_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_attribute_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _2 = 
# 459 "cparser/pre_parser.mly"
    ()
# 8524 "cparser/pre_parser.ml"
             in
            
# 172 "cparser/pre_parser.mly"
              ()
# 8529 "cparser/pre_parser.ml"
            
          in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8535 "cparser/pre_parser.ml"
           : 'tv_list_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8555 "cparser/pre_parser.ml"
           in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8560 "cparser/pre_parser.ml"
           : 'tv_list_declaration_specifier_no_typedef_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_declaration_specifier_no_typedef_name = Obj.magic _2 in
        let _1 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 172 "cparser/pre_parser.mly"
              ()
# 8594 "cparser/pre_parser.ml"
           in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8599 "cparser/pre_parser.ml"
           : 'tv_list_declaration_specifier_no_typedef_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8619 "cparser/pre_parser.ml"
           in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8624 "cparser/pre_parser.ml"
           : 'tv_list_pointer1_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8659 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _2 = 
# 722 "cparser/pre_parser.mly"
    ()
# 8670 "cparser/pre_parser.ml"
             in
            
# 172 "cparser/pre_parser.mly"
              ()
# 8675 "cparser/pre_parser.ml"
            
          in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8681 "cparser/pre_parser.ml"
           : 'tv_list_pointer1_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8701 "cparser/pre_parser.ml"
           in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8706 "cparser/pre_parser.ml"
           : 'tv_list_specifier_qualifier_no_typedef_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_specifier_qualifier_no_typedef_name = Obj.magic _2 in
        let _1 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 172 "cparser/pre_parser.mly"
              ()
# 8740 "cparser/pre_parser.ml"
           in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8745 "cparser/pre_parser.ml"
           : 'tv_list_specifier_qualifier_no_typedef_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8765 "cparser/pre_parser.ml"
           in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8770 "cparser/pre_parser.ml"
           : 'tv_list_translation_item_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_translation_item = Obj.magic _2 in
        let _1 : 'tv_list_translation_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 172 "cparser/pre_parser.mly"
              ()
# 8804 "cparser/pre_parser.ml"
           in
          (
# 175 "cparser/pre_parser.mly"
              ()
# 8809 "cparser/pre_parser.ml"
           : 'tv_list_translation_item_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_inclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_logical_and_expression = 
# 369 "cparser/pre_parser.mly"
    ()
# 8835 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_inclusive_or_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8869 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_logical_and_expression = 
# 369 "cparser/pre_parser.mly"
    ()
# 8878 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_logical_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_logical_or_expression = 
# 374 "cparser/pre_parser.mly"
    ()
# 8903 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_logical_and_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8937 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_logical_or_expression = 
# 374 "cparser/pre_parser.mly"
    ()
# 8946 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_low_prec = 
# 666 "cparser/pre_parser.mly"
                          ()
# 8964 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_cast_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_expression = 
# 317 "cparser/pre_parser.mly"
    ()
# 8989 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_cast_expression = Obj.magic _3 in
        let _2 : 'tv_multiplicative_operator = Obj.magic _2 in
        let _1 : 'tv_multiplicative_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_multiplicative_expression = 
# 317 "cparser/pre_parser.mly"
    ()
# 9028 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9049 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 312 "cparser/pre_parser.mly"
                         ()
# 9057 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9078 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 312 "cparser/pre_parser.mly"
                         ()
# 9086 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9107 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 312 "cparser/pre_parser.mly"
                         ()
# 9115 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9134 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9139 "cparser/pre_parser.ml"
           : 'tv_option_COMMA_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9161 "cparser/pre_parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9170 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9175 "cparser/pre_parser.ml"
           : 'tv_option_COMMA_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9195 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9200 "cparser/pre_parser.ml"
           : 'tv_option_abstract_declarator_parameter_declaration__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_abstract_declarator_parameter_declaration_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9227 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9232 "cparser/pre_parser.ml"
           : 'tv_option_abstract_declarator_parameter_declaration__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9252 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9257 "cparser/pre_parser.ml"
           : 'tv_option_abstract_declarator_type_name__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_abstract_declarator_type_name_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9284 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9289 "cparser/pre_parser.ml"
           : 'tv_option_abstract_declarator_type_name__)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9309 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9314 "cparser/pre_parser.ml"
           : 'tv_option_argument_expression_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_argument_expression_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9341 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9346 "cparser/pre_parser.ml"
           : 'tv_option_argument_expression_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9366 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9371 "cparser/pre_parser.ml"
           : 'tv_option_block_item_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_block_item_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9398 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9403 "cparser/pre_parser.ml"
           : 'tv_option_block_item_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9423 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9428 "cparser/pre_parser.ml"
           : 'tv_option_context_parameter_type_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_context_parameter_type_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9455 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9460 "cparser/pre_parser.ml"
           : 'tv_option_context_parameter_type_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9480 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9485 "cparser/pre_parser.ml"
           : 'tv_option_declarator_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9512 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9517 "cparser/pre_parser.ml"
           : 'tv_option_declarator_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9537 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9542 "cparser/pre_parser.ml"
           : 'tv_option_designation_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_designation = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9569 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9574 "cparser/pre_parser.ml"
           : 'tv_option_designation_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9594 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9599 "cparser/pre_parser.ml"
           : 'tv_option_designator_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_designator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9626 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9631 "cparser/pre_parser.ml"
           : 'tv_option_designator_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9651 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9656 "cparser/pre_parser.ml"
           : 'tv_option_direct_abstract_declarator_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_direct_abstract_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9683 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9688 "cparser/pre_parser.ml"
           : 'tv_option_direct_abstract_declarator_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9708 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9713 "cparser/pre_parser.ml"
           : 'tv_option_expression_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9740 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9745 "cparser/pre_parser.ml"
           : 'tv_option_expression_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9765 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9770 "cparser/pre_parser.ml"
           : 'tv_option_identifier_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_identifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9797 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9802 "cparser/pre_parser.ml"
           : 'tv_option_identifier_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9822 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9827 "cparser/pre_parser.ml"
           : 'tv_option_init_declarator_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_init_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9854 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9859 "cparser/pre_parser.ml"
           : 'tv_option_init_declarator_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9879 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9884 "cparser/pre_parser.ml"
           : 'tv_option_other_identifier_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v =
          let o =
            let x = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 9912 "cparser/pre_parser.ml"
             in
            
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9917 "cparser/pre_parser.ml"
            
          in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9923 "cparser/pre_parser.ml"
           : 'tv_option_other_identifier_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 9943 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9948 "cparser/pre_parser.ml"
           : 'tv_option_struct_declarator_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_struct_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 9975 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 9980 "cparser/pre_parser.ml"
           : 'tv_option_struct_declarator_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 10000 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 10005 "cparser/pre_parser.ml"
           : 'tv_option_type_qualifier_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 10032 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 10037 "cparser/pre_parser.ml"
           : 'tv_option_type_qualifier_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let o = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 10057 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 10062 "cparser/pre_parser.ml"
           : 'tv_option_typedef_declarator_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_typedef_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let o = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 10089 "cparser/pre_parser.ml"
           in
          (
# 153 "cparser/pre_parser.mly"
    ( o )
# 10094 "cparser/pre_parser.ml"
           : 'tv_option_typedef_declarator_list_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10116 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 10125 "cparser/pre_parser.ml"
           in
          (
# 161 "cparser/pre_parser.mly"
               ()
# 10130 "cparser/pre_parser.ml"
           : 'tv_optional_assignment_expression_RBRACK_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10158 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_assignment_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 10168 "cparser/pre_parser.ml"
           in
          (
# 161 "cparser/pre_parser.mly"
               ()
# 10173 "cparser/pre_parser.ml"
           : 'tv_optional_assignment_expression_RBRACK_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10195 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 10204 "cparser/pre_parser.ml"
           in
          (
# 161 "cparser/pre_parser.mly"
               ()
# 10209 "cparser/pre_parser.ml"
           : 'tv_optional_expression_RPAREN_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10237 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 10247 "cparser/pre_parser.ml"
           in
          (
# 161 "cparser/pre_parser.mly"
               ()
# 10252 "cparser/pre_parser.ml"
           : 'tv_optional_expression_RPAREN_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10274 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 10283 "cparser/pre_parser.ml"
           in
          (
# 161 "cparser/pre_parser.mly"
               ()
# 10288 "cparser/pre_parser.ml"
           : 'tv_optional_expression_SEMICOLON_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10316 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 10326 "cparser/pre_parser.ml"
           in
          (
# 161 "cparser/pre_parser.mly"
               ()
# 10331 "cparser/pre_parser.ml"
           : 'tv_optional_expression_SEMICOLON_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_declare_varname_declarator_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_parameter_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_parameter_declaration = 
# 749 "cparser/pre_parser.mly"
    ()
# 10364 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_abstract_declarator_parameter_declaration__ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_parameter_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_parameter_declaration = 
# 749 "cparser/pre_parser.mly"
    ()
# 10396 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_parameter_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_parameter_list = 
# 744 "cparser/pre_parser.mly"
    ()
# 10421 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_parameter_declaration = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10455 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_parameter_list = 
# 744 "cparser/pre_parser.mly"
    ()
# 10464 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_parameter_type_list = 
# 739 "cparser/pre_parser.mly"
    ()
# 10489 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10522 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10527 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_parameter_type_list = 
# 739 "cparser/pre_parser.mly"
    ()
# 10536 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_primary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 10561 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10600 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10606 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 10615 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10654 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_argument_expression_list_ = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10660 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 10669 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10720 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_type_name = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10726 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10732 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10737 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 10745 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10796 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10802 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10808 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10813 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10822 "cparser/pre_parser.ml"
           in
          (
# 280 "cparser/pre_parser.mly"
    ()
# 10827 "cparser/pre_parser.ml"
           : 'tv_postfix_expression)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10885 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_designator_list = Obj.magic _6 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10892 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10898 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10903 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10912 "cparser/pre_parser.ml"
           in
          (
# 280 "cparser/pre_parser.mly"
    ()
# 10917 "cparser/pre_parser.ml"
           : 'tv_postfix_expression)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10952 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let _3 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10962 "cparser/pre_parser.ml"
           in
          (
# 280 "cparser/pre_parser.mly"
    ()
# 10967 "cparser/pre_parser.ml"
           : 'tv_postfix_expression)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11002 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let _3 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 11012 "cparser/pre_parser.ml"
           in
          (
# 280 "cparser/pre_parser.mly"
    ()
# 11017 "cparser/pre_parser.ml"
           : 'tv_postfix_expression)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11045 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 11054 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11081 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 11090 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11147 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_option_COMMA_ = Obj.magic _6 in
        let _5 : 'tv_initializer_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11154 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11159 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_type_name = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11165 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_postfix_expression = 
# 280 "cparser/pre_parser.mly"
    ()
# 11173 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 11200 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 11205 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let _1 = 
# 199 "cparser/pre_parser.mly"
    ( i )
# 11214 "cparser/pre_parser.ml"
           in
          (
# 252 "cparser/pre_parser.mly"
    ()
# 11219 "cparser/pre_parser.ml"
           : 'tv_primary_expression)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 49 "cparser/pre_parser.mly"
      (Cabs.constant * Cabs.loc)
# 11241 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression = 
# 252 "cparser/pre_parser.mly"
    ()
# 11249 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression = 
# 252 "cparser/pre_parser.mly"
    ()
# 11274 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11307 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_expression = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11313 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expression = 
# 252 "cparser/pre_parser.mly"
    ()
# 11321 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_generic_selection = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression = 
# 252 "cparser/pre_parser.mly"
    ()
# 11346 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_shift_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_expression = 
# 341 "cparser/pre_parser.mly"
    ()
# 11371 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_shift_expression = Obj.magic _3 in
        let _2 : 'tv_relational_operator = Obj.magic _2 in
        let _1 : 'tv_relational_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_relational_expression = 
# 341 "cparser/pre_parser.mly"
    ()
# 11410 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11431 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 336 "cparser/pre_parser.mly"
                      ()
# 11439 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11460 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 336 "cparser/pre_parser.mly"
                      ()
# 11468 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11489 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 336 "cparser/pre_parser.mly"
                      ()
# 11497 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11518 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 336 "cparser/pre_parser.mly"
                      ()
# 11526 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 459 "cparser/pre_parser.mly"
    ()
# 11552 "cparser/pre_parser.ml"
           in
          (
# 180 "cparser/pre_parser.mly"
              ()
# 11557 "cparser/pre_parser.ml"
           : 'tv_rlist_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 459 "cparser/pre_parser.mly"
    ()
# 11584 "cparser/pre_parser.ml"
           in
          (
# 180 "cparser/pre_parser.mly"
              ()
# 11589 "cparser/pre_parser.ml"
           : 'tv_rlist_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 459 "cparser/pre_parser.mly"
    ()
# 11616 "cparser/pre_parser.ml"
           in
          (
# 180 "cparser/pre_parser.mly"
              ()
# 11621 "cparser/pre_parser.ml"
           : 'tv_rlist_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 459 "cparser/pre_parser.mly"
    ()
# 11648 "cparser/pre_parser.ml"
           in
          (
# 180 "cparser/pre_parser.mly"
              ()
# 11653 "cparser/pre_parser.ml"
           : 'tv_rlist_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 459 "cparser/pre_parser.mly"
    ()
# 11687 "cparser/pre_parser.ml"
           in
          (
# 181 "cparser/pre_parser.mly"
              ()
# 11692 "cparser/pre_parser.ml"
           : 'tv_rlist_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 459 "cparser/pre_parser.mly"
    ()
# 11726 "cparser/pre_parser.ml"
           in
          (
# 181 "cparser/pre_parser.mly"
              ()
# 11731 "cparser/pre_parser.ml"
           : 'tv_rlist_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 459 "cparser/pre_parser.mly"
    ()
# 11765 "cparser/pre_parser.ml"
           in
          (
# 181 "cparser/pre_parser.mly"
              ()
# 11770 "cparser/pre_parser.ml"
           : 'tv_rlist_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 459 "cparser/pre_parser.mly"
    ()
# 11804 "cparser/pre_parser.ml"
           in
          (
# 181 "cparser/pre_parser.mly"
              ()
# 11809 "cparser/pre_parser.ml"
           : 'tv_rlist_declaration_specifier_no_type_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_save_context = 
# 221 "cparser/pre_parser.mly"
              ( !save_context () )
# 11828 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : 'tv_ifelse_statement1 = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_selection_statement = 
# 846 "cparser/pre_parser.mly"
    ( ctx() )
# 11867 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : 'tv_statement = Obj.magic _7 in
        let _6 : 'tv_save_context = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11926 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11932 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11937 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_selection_statement = 
# 846 "cparser/pre_parser.mly"
    ( ctx() )
# 11946 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ctx;
                    MenhirLib.EngineTypes.startp = _startpos_ctx_;
                    MenhirLib.EngineTypes.endp = _endpos_ctx_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_statement = Obj.magic _6 in
        let _5 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11998 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12004 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12009 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_selection_statement = 
# 846 "cparser/pre_parser.mly"
    ( ctx() )
# 12018 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_additive_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_expression = 
# 333 "cparser/pre_parser.mly"
    ()
# 12043 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_additive_expression = Obj.magic _3 in
        let _2 : 'tv_shift_operator = Obj.magic _2 in
        let _1 : 'tv_shift_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_shift_expression = 
# 333 "cparser/pre_parser.mly"
    ()
# 12082 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12103 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_operator = 
# 328 "cparser/pre_parser.mly"
               ()
# 12111 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12132 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_operator = 
# 328 "cparser/pre_parser.mly"
               ()
# 12140 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 12173 "cparser/pre_parser.ml"
           in
          (
# 547 "cparser/pre_parser.mly"
    ()
# 12178 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_list_struct_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 12219 "cparser/pre_parser.ml"
           in
          (
# 547 "cparser/pre_parser.mly"
    ()
# 12224 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_list_struct_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 12258 "cparser/pre_parser.ml"
           in
          (
# 547 "cparser/pre_parser.mly"
    ()
# 12263 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_list_struct_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 12304 "cparser/pre_parser.ml"
           in
          (
# 547 "cparser/pre_parser.mly"
    ()
# 12309 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_list_struct_declaration_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 12343 "cparser/pre_parser.ml"
           in
          (
# 547 "cparser/pre_parser.mly"
    ()
# 12348 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_list_type_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 12389 "cparser/pre_parser.ml"
           in
          (
# 547 "cparser/pre_parser.mly"
    ()
# 12394 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_list_type_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 147 "cparser/pre_parser.mly"
    ( None )
# 12428 "cparser/pre_parser.ml"
           in
          (
# 547 "cparser/pre_parser.mly"
    ()
# 12433 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_list_type_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 149 "cparser/pre_parser.mly"
    ( Some x )
# 12474 "cparser/pre_parser.ml"
           in
          (
# 547 "cparser/pre_parser.mly"
    ()
# 12479 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_list_type_name_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_specifier_no_typedef_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_specifier_qualifier_no_typedef_name = 
# 552 "cparser/pre_parser.mly"
    ()
# 12505 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 592 "cparser/pre_parser.mly"
    ()
# 12531 "cparser/pre_parser.ml"
           in
          (
# 552 "cparser/pre_parser.mly"
    ()
# 12536 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_no_typedef_name)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 592 "cparser/pre_parser.mly"
    ()
# 12563 "cparser/pre_parser.ml"
           in
          (
# 552 "cparser/pre_parser.mly"
    ()
# 12568 "cparser/pre_parser.ml"
           : 'tv_specifier_qualifier_no_typedef_name)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_labeled_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 801 "cparser/pre_parser.mly"
    ()
# 12594 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_compound_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 801 "cparser/pre_parser.mly"
    ()
# 12619 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_expression_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 801 "cparser/pre_parser.mly"
    ()
# 12644 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_selection_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 801 "cparser/pre_parser.mly"
    ()
# 12669 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_iteration_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 801 "cparser/pre_parser.mly"
    ()
# 12694 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_jump_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 801 "cparser/pre_parser.mly"
    ()
# 12719 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 801 "cparser/pre_parser.mly"
    ()
# 12744 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12801 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12806 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_string_literals_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12812 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12818 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12823 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _3 = 
# 407 "cparser/pre_parser.mly"
    ()
# 12832 "cparser/pre_parser.ml"
           in
          (
# 630 "cparser/pre_parser.mly"
    ()
# 12837 "cparser/pre_parser.ml"
           : 'tv_static_assert_declaration)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12859 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 450 "cparser/pre_parser.mly"
    ()
# 12867 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12888 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 450 "cparser/pre_parser.mly"
    ()
# 12896 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12917 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 450 "cparser/pre_parser.mly"
    ()
# 12925 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12946 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 450 "cparser/pre_parser.mly"
    ()
# 12954 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 50 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 12975 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_string_literals_list = 
# 218 "cparser/pre_parser.mly"
    ()
# 12983 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 50 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 13010 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_string_literals_list = 
# 218 "cparser/pre_parser.mly"
    ()
# 13019 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13052 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_struct_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_specifier_qualifier_list_struct_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_struct_declaration = 
# 539 "cparser/pre_parser.mly"
    ()
# 13062 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declaration = 
# 539 "cparser/pre_parser.mly"
    ()
# 13087 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_struct_declaration_list = 
# 534 "cparser/pre_parser.mly"
    ()
# 13105 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_struct_declaration = Obj.magic _2 in
        let _1 : 'tv_struct_declaration_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_struct_declaration_list = 
# 534 "cparser/pre_parser.mly"
    ()
# 13137 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declarator = 
# 562 "cparser/pre_parser.mly"
    ()
# 13162 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13196 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 = 
# 407 "cparser/pre_parser.mly"
    ()
# 13206 "cparser/pre_parser.ml"
           in
          (
# 562 "cparser/pre_parser.mly"
    ()
# 13211 "cparser/pre_parser.ml"
           : 'tv_struct_declarator)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_struct_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declarator_list = 
# 557 "cparser/pre_parser.mly"
    ()
# 13237 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_struct_declarator = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13271 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_struct_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_struct_declarator_list = 
# 557 "cparser/pre_parser.mly"
    ()
# 13280 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13301 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_or_union = 
# 529 "cparser/pre_parser.mly"
    ()
# 13309 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13330 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_or_union = 
# 529 "cparser/pre_parser.mly"
    ()
# 13338 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13389 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_struct_declaration_list = Obj.magic _5 in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13395 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_other_identifier_ = Obj.magic _3 in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_struct_or_union = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_struct_or_union_specifier = 
# 524 "cparser/pre_parser.mly"
    ()
# 13406 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_struct_or_union = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let _3 = 
# 213 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 13446 "cparser/pre_parser.ml"
           in
          (
# 524 "cparser/pre_parser.mly"
    ()
# 13451 "cparser/pre_parser.ml"
           : 'tv_struct_or_union_specifier)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_definition = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 913 "cparser/pre_parser.mly"
    ()
# 13478 "cparser/pre_parser.ml"
           in
          (
# 907 "cparser/pre_parser.mly"
    ()
# 13483 "cparser/pre_parser.ml"
           : 'tv_translation_item)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_external_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 913 "cparser/pre_parser.mly"
    ()
# 13510 "cparser/pre_parser.ml"
           in
          (
# 907 "cparser/pre_parser.mly"
    ()
# 13515 "cparser/pre_parser.ml"
           : 'tv_translation_item)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 51 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 13537 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 913 "cparser/pre_parser.mly"
    ()
# 13546 "cparser/pre_parser.ml"
           in
          (
# 907 "cparser/pre_parser.mly"
    ()
# 13551 "cparser/pre_parser.ml"
           : 'tv_translation_item)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13573 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = 
# 907 "cparser/pre_parser.mly"
    ()
# 13581 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : 'tv_list_translation_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 82 "cparser/pre_parser.mly"
      (unit)
# 13613 "cparser/pre_parser.ml"
        ) = 
# 902 "cparser/pre_parser.mly"
    ()
# 13617 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_abstract_declarator_type_name__ = Obj.magic _2 in
        let _1 : 'tv_specifier_qualifier_list_type_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_type_name = 
# 753 "cparser/pre_parser.mly"
    ()
# 13649 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_type_qualifier_noattr = Obj.magic _1_inlined1 in
        let _1 : 'tv_option_type_qualifier_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 = 
# 592 "cparser/pre_parser.mly"
    ()
# 13682 "cparser/pre_parser.ml"
           in
          (
# 730 "cparser/pre_parser.mly"
    ()
# 13687 "cparser/pre_parser.ml"
           : 'tv_type_qualifier_list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_attribute_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_option_type_qualifier_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 = 
# 592 "cparser/pre_parser.mly"
    ()
# 13721 "cparser/pre_parser.ml"
           in
          (
# 730 "cparser/pre_parser.mly"
    ()
# 13726 "cparser/pre_parser.ml"
           : 'tv_type_qualifier_list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13748 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 587 "cparser/pre_parser.mly"
    ()
# 13756 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13777 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 587 "cparser/pre_parser.mly"
    ()
# 13785 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13806 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 587 "cparser/pre_parser.mly"
    ()
# 13814 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13835 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 13843 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13864 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 13872 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13893 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 13901 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13922 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 13930 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13951 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 13959 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13980 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 13988 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14009 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 14017 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14038 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 14046 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14067 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 14075 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14096 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 14104 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_struct_or_union_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 14129 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_enum_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 519 "cparser/pre_parser.mly"
    ()
# 14154 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declare_typename_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_declarator = 
# 443 "cparser/pre_parser.mly"
    ()
# 14179 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_typedef_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_declarator_list = 
# 439 "cparser/pre_parser.mly"
    ()
# 14204 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_typedef_declarator = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14238 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_typedef_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_typedef_declarator_list = 
# 439 "cparser/pre_parser.mly"
    ()
# 14247 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 47 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 14274 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 46 "cparser/pre_parser.mly"
      (string)
# 14279 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_typedef_name = 
# 195 "cparser/pre_parser.mly"
    ( i )
# 14287 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expression = 
# 295 "cparser/pre_parser.mly"
    ()
# 14312 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14340 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 295 "cparser/pre_parser.mly"
    ()
# 14348 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14376 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 295 "cparser/pre_parser.mly"
    ()
# 14384 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_cast_expression = Obj.magic _2 in
        let _1 : 'tv_unary_operator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 295 "cparser/pre_parser.mly"
    ()
# 14416 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14444 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 295 "cparser/pre_parser.mly"
    ()
# 14452 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14491 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14497 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14502 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_unary_expression = 
# 295 "cparser/pre_parser.mly"
    ()
# 14510 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14549 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14555 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14560 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_unary_expression = 
# 295 "cparser/pre_parser.mly"
    ()
# 14568 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14589 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 304 "cparser/pre_parser.mly"
    ()
# 14597 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14618 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 304 "cparser/pre_parser.mly"
    ()
# 14626 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14647 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 304 "cparser/pre_parser.mly"
    ()
# 14655 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14676 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 304 "cparser/pre_parser.mly"
    ()
# 14684 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14705 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 304 "cparser/pre_parser.mly"
    ()
# 14713 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 53 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14734 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 304 "cparser/pre_parser.mly"
    ()
# 14742 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let translation_unit_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (
# 82 "cparser/pre_parser.mly"
      (unit)
# 14773 "cparser/pre_parser.ml"
    ))

module Incremental = struct
  
  let translation_unit_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 82 "cparser/pre_parser.mly"
      (unit)
# 14783 "cparser/pre_parser.ml"
      ) MenhirInterpreter.checkpoint)
  
end
